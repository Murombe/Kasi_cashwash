{"file_contents":{"MongoDB-Setup-Instructions.md":{"content":"# MongoDB Setup Instructions for Local Development\n\nThis project includes a complete MongoDB implementation alongside the PostgreSQL setup for Replit. When deploying locally, you can choose to use MongoDB instead of PostgreSQL.\n\n## Files Included for MongoDB\n\nThe following files are included for MongoDB implementation:\n\n### Database & Connection\n- `server/mongodb.ts` - MongoDB connection setup\n- `shared/mongoose-schema.ts` - Mongoose schemas for all data models\n\n### Storage & Authentication\n- `server/mongodb-storage.ts` - MongoDB storage implementation\n- `server/mongodb-auth.ts` - Authentication with MongoDB session storage\n- `server/mongodb-routes.ts` - API routes using MongoDB storage\n\n### Utilities\n- `server/mongodb-seed.ts` - Database seeding script with sample data\n\n## Setup Instructions\n\n### 1. Install and Start MongoDB\n\n**Option A: Using MongoDB Community Edition**\n```bash\n# On Ubuntu/Debian\nsudo apt-get install -y mongodb\nsudo systemctl start mongodb\nsudo systemctl enable mongodb\n\n# On macOS (using Homebrew)\nbrew tap mongodb/brew\nbrew install mongodb-community\nbrew services start mongodb-community\n\n# On Windows\n# Download and install from https://www.mongodb.com/try/download/community\n```\n\n**Option B: Using Docker**\n```bash\ndocker run -d --name mongodb -p 27017:27017 mongo:latest\n```\n\n### 2. Install MongoDB Dependencies\n\nThe required packages are already included in package.json:\n- `mongoose` - MongoDB object modeling\n- `connect-mongo` - MongoDB session store for Express\n- `@types/mongoose` - TypeScript types\n\nIf you need to install them separately:\n```bash\nnpm install mongoose connect-mongo @types/mongoose\n```\n\n### 3. Update Server Configuration\n\nTo switch to MongoDB, edit `server/index.ts`:\n\n```typescript\n// Change imports from:\nimport { registerRoutes } from \"./routes\";\n\n// To:\nimport { registerRoutes } from \"./mongodb-routes\";\nimport { connectMongoDB } from \"./mongodb\";\n\n// Add MongoDB connection in the async function:\n(async () => {\n  // Connect to MongoDB\n  await connectMongoDB();\n  \n  const server = await registerRoutes(app);\n  // ... rest of the code\n})();\n```\n\n### 4. Environment Variables\n\nCreate a `.env` file (or update existing one) with MongoDB configuration:\n\n```bash\n# MongoDB Configuration\nMONGODB_URI=mongodb://localhost:27017/aquashine\n\n# Keep existing Replit/Stripe variables\nSESSION_SECRET=your_session_secret\nSTRIPE_SECRET_KEY=your_stripe_secret_key\nVITE_STRIPE_PUBLIC_KEY=your_stripe_public_key\n```\n\n### 5. Seed the Database\n\nRun the seed script to populate MongoDB with sample data:\n\n```bash\nnpm run tsx server/mongodb-seed.ts\n```\n\nThis will create:\n- 6 sample car wash services with ZAR pricing\n- Time slots for the next 30 days\n- An admin user account\n\n### 6. Start the Application\n\n```bash\nnpm run dev\n```\n\nThe application will now use MongoDB instead of PostgreSQL.\n\n## Key Differences from PostgreSQL Setup\n\n### Schema Definition\n- Uses Mongoose schemas with TypeScript interfaces\n- Automatic timestamp management (createdAt, updatedAt)\n- Built-in validation and type safety\n\n### Storage Operations\n- Native MongoDB operations with Mongoose ORM\n- Automatic relationship population\n- Flexible querying with MongoDB query syntax\n\n### Session Storage\n- Uses `connect-mongo` for session persistence\n- Automatic session cleanup and TTL management\n\n### Authentication\n- Same Replit OIDC integration\n- MongoDB-backed session storage\n- User data stored in MongoDB collections\n\n## Switching Between Databases\n\nTo switch back to PostgreSQL (for Replit deployment):\n\n1. Revert `server/index.ts` to use `./routes` instead of `./mongodb-routes`\n2. Remove MongoDB connection call\n3. Ensure PostgreSQL environment variables are set\n\nFor local development with different databases, you can maintain separate configuration files or use environment variables to determine which database to use.\n\n## Data Models\n\nAll data models are maintained in both formats:\n- `shared/schema.ts` - Drizzle/PostgreSQL schemas\n- `shared/mongoose-schema.ts` - Mongoose/MongoDB schemas\n\nBoth provide the same TypeScript types and validation, ensuring consistency across database implementations.\n\n## Admin User\n\nA default admin user is created during seeding:\n- **Email**: admin@aquashine.co.za\n- **Role**: admin\n- **Access**: Full dashboard, user management, analytics\n\n## South African Rand (ZAR) Support\n\nAll pricing is configured for South African Rand:\n- Service prices in ZAR (R149.99, R299.99, etc.)\n- Stripe payments in ZAR currency\n- Proper currency formatting throughout the application\n\n## Production Considerations\n\nFor production MongoDB deployment:\n- Use MongoDB Atlas or a managed MongoDB service\n- Update `MONGODB_URI` to point to your production database\n- Enable authentication and SSL\n- Configure proper backup and monitoring\n- Use connection pooling for performance\n\nThe application maintains full feature parity between PostgreSQL and MongoDB implementations, including:\n- User authentication and roles\n- Service and booking management\n- Payment processing (cash/card)\n- Analytics and reporting\n- Admin dashboard functionality","size_bytes":5083},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AquaShine Car Wash Service\n\n## Overview\n\nAquaShine is a modern car wash service booking platform built with a full-stack TypeScript architecture. The application features a React frontend with a Node.js/Express backend, offering customers the ability to browse services, book appointments, and leave reviews. The platform includes both customer-facing features and an administrative dashboard for managing services, bookings, and operations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nDatabase preference: MongoDB for local development\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Custom component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system featuring glass morphism effects\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API architecture with structured route handlers\n- **Error Handling**: Centralized error handling middleware\n- **Development**: Hot reload with tsx for development server\n\n### Authentication System\n- **Provider**: Replit OpenID Connect (OIDC) integration\n- **Strategy**: Passport.js with OpenID Connect strategy\n- **Session Management**: Express sessions with PostgreSQL/MongoDB store\n- **Authorization**: Role-based access control (user/admin roles)\n\n### Database Architecture\n- **Database**: Dual support - PostgreSQL (Replit) / MongoDB (Local)\n- **ORM**: Drizzle ORM (PostgreSQL) / Mongoose (MongoDB) for type-safe operations\n- **Schema**: Relational design with users, services, slots, bookings, and reviews\n- **Migrations**: Drizzle Kit (PostgreSQL) / Mongoose schemas (MongoDB)\n\n### Data Models\n- **Users**: Authentication data, profile information, and role management\n- **Services**: Car wash service definitions with pricing and duration\n- **Slots**: Available time slots for service bookings\n- **Bookings**: Customer reservations with vehicle information\n- **Reviews**: Customer feedback and ratings system\n- **Sessions**: Secure session storage for authentication\n\n### Component Architecture\n- **Design System**: Glass morphism theme with consistent spacing and typography\n- **Reusable Components**: Modular UI components (ServiceCard, ReviewCard, BookingModal)\n- **Layout Components**: Navigation, Footer, and admin sidebar\n- **Form Handling**: React Hook Form with Zod validation\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n\n### Business Logic\n- **Service Categories**: Basic wash, premium, and detailing tiers\n- **Booking System**: Time slot management with availability tracking\n- **Vehicle Information**: Comprehensive vehicle data collection\n- **Review System**: Rating and comment functionality\n- **Admin Dashboard**: Complete service and booking management\n\n## External Dependencies\n\n### Core Technologies\n- **@neondatabase/serverless**: PostgreSQL database connectivity (Replit)\n- **mongoose**: MongoDB object modeling and validation (Local)\n- **drizzle-orm**: Type-safe database ORM and query builder (PostgreSQL)\n- **connect-mongo**: MongoDB session store for Express (Local)\n- **passport**: Authentication middleware framework\n- **openid-client**: OpenID Connect authentication\n\n### UI and Styling\n- **@radix-ui/***: Accessible UI primitive components\n- **tailwindcss**: Utility-first CSS framework\n- **class-variance-authority**: Component variant management\n- **clsx**: Conditional CSS class utility\n\n### Development Tools\n- **vite**: Fast build tool and development server\n- **typescript**: Static type checking\n- **tsx**: TypeScript execution for Node.js\n- **esbuild**: Fast JavaScript bundler for production\n\n### State Management\n- **@tanstack/react-query**: Server state management and caching\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Form validation resolvers\n\n### Payment Processing\n- **@stripe/stripe-js**: Stripe payment integration\n- **@stripe/react-stripe-js**: React components for Stripe\n\n### Utilities\n- **date-fns**: Date manipulation and formatting\n- **zod**: Runtime type validation and schema definition\n- **memoizee**: Function memoization for performance optimization\n\n## Database Implementation\n\nThe project includes complete implementations for both databases:\n\n### PostgreSQL (Replit Environment)\n- Files: `shared/schema.ts`, `server/storage.ts`, `server/routes.ts`, `server/replitAuth.ts`\n- Used for Replit deployment with Neon serverless PostgreSQL\n- Drizzle ORM with type-safe operations\n\n### MongoDB (Local Development) \n- Files: `shared/mongoose-schema.ts`, `server/mongodb-storage.ts`, `server/mongodb-routes.ts`, `server/mongodb-auth.ts`, `server/mongodb.ts`\n- Used for local development with MongoDB\n- Mongoose ODM with schema validation\n- Complete feature parity with PostgreSQL implementation\n\n### Switching Between Databases\nTo use MongoDB locally, update `server/index.ts`:\n1. Change imports to use `mongodb-routes` instead of `routes`\n2. Add MongoDB connection call\n3. Set `MONGODB_URI` environment variable\n4. Run seed script: `npm run tsx server/mongodb-seed.ts`","size_bytes":5341},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-20px)' }\n        },\n        glow: {\n          '0%': { boxShadow: '0 0 20px rgba(6, 182, 212, 0.3)' },\n          '100%': { boxShadow: '0 0 40px rgba(6, 182, 212, 0.6)' }\n        },\n        ripple: {\n          '0%': { transform: 'scale(0)', opacity: '1' },\n          '100%': { transform: 'scale(4)', opacity: '0' }\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(100px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' }\n        },\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' }\n        },\n        bounceSubtle: {\n          '0%, 100%': { transform: 'translateY(0px)' },\n          '50%': { transform: 'translateY(-10px)' }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        'float': 'float 6s ease-in-out infinite',\n        'glow': 'glow 2s ease-in-out infinite alternate',\n        'ripple': 'ripple 0.6s linear',\n        'slide-up': 'slideUp 0.8s ease-out',\n        'fade-in': 'fadeIn 1s ease-out',\n        'bounce-subtle': 'bounceSubtle 2s ease-in-out infinite',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3904},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import jwt from 'jsonwebtoken';\nimport bcrypt from 'bcryptjs';\nimport type { RequestHandler } from 'express';\nimport { storage } from './mongodb-storage';\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'your-jwt-secret-key';\n\nexport interface AuthUser {\n  id: string;\n  email: string;\n  role: string;\n}\n\nexport const generateToken = (user: AuthUser): string => {\n  return jwt.sign(\n    { \n      id: user.id, \n      email: user.email, \n      role: user.role \n    },\n    JWT_SECRET,\n    { expiresIn: '7d' }\n  );\n};\n\nexport const verifyToken = (token: string): AuthUser | null => {\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as AuthUser;\n    return decoded;\n  } catch (error) {\n    return null;\n  }\n};\n\nexport const hashPassword = async (password: string): Promise<string> => {\n  const salt = await bcrypt.genSalt(10);\n  return bcrypt.hash(password, salt);\n};\n\nexport const comparePassword = async (password: string, hash: string): Promise<boolean> => {\n  return bcrypt.compare(password, hash);\n};\n\nexport const authenticateToken: RequestHandler = async (req: any, res, next) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1]; // Bearer TOKEN\n\n  if (!token) {\n    return res.status(401).json({ message: 'Access token required' });\n  }\n\n  const user = verifyToken(token);\n  if (!user) {\n    return res.status(401).json({ message: 'Invalid or expired token' });\n  }\n\n  // Get full user data from database\n  const userData = await storage.getUser(user.id);\n  if (!userData) {\n    return res.status(401).json({ message: 'User not found' });\n  }\n\n  req.user = userData;\n  next();\n};\n\nexport const requireAdmin: RequestHandler = (req: any, res, next) => {\n  if (req.user?.role !== 'admin') {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};","size_bytes":1845},"server/db.ts":{"content":"import { Pool } from 'pg';\nimport { drizzle } from 'drizzle-orm/node-postgres';\nimport * as schema from \"@shared/schema\";\n\nconst DATABASE_URL = process.env.DATABASE_URL || \"postgresql://postgres:Iwasbornin2022@localhost:5433/aquashine\";\n\nexport const pool = new Pool({ connectionString: DATABASE_URL });\nexport const db = drizzle(pool, { schema });","size_bytes":348},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, 'localhost', () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2050},"server/mongodb-auth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport MongoStore from \"connect-mongo\";\nimport { storage } from \"./mongodb-storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/aquashine';\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: MongoStore.create({\n      mongoUrl: mongoUri,\n      ttl: sessionTtl / 1000, // TTL in seconds\n      autoRemove: 'native',\n    }),\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(claims: any) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env.REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4215},"server/mongodb-routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./mongodb-storage\";\nimport { setupAuth, isAuthenticated } from \"./mongodb-auth\";\nimport { insertServiceSchema, insertSlotSchema, insertBookingSchema, insertReviewSchema } from \"@shared/mongoose-schema\";\nimport { z } from \"zod\";\nimport Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2025-01-28.basil\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Public service routes\n  app.get('/api/services', async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get('/api/services/:id', async (req, res) => {\n    try {\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error fetching service:\", error);\n      res.status(500).json({ message: \"Failed to fetch service\" });\n    }\n  });\n\n  // Admin-only service management\n  app.post('/api/services', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(validatedData);\n      res.status(201).json(service);\n    } catch (error) {\n      console.error(\"Error creating service:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put('/api/services/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertServiceSchema.partial().parse(req.body);\n      const service = await storage.updateService(req.params.id, validatedData);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating service:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete('/api/services/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await storage.deleteService(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Slot management routes\n  app.get('/api/slots', async (req, res) => {\n    try {\n      const { serviceId, date } = req.query;\n      const slots = await storage.getSlotsByService(\n        serviceId as string,\n        date as string\n      );\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch slots\" });\n    }\n  });\n\n  app.get('/api/slots/available', async (req, res) => {\n    try {\n      const { serviceId, date } = req.query;\n      const slots = await storage.getAvailableSlots(\n        serviceId as string,\n        date as string\n      );\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching available slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch available slots\" });\n    }\n  });\n\n  // Admin-only slot creation\n  app.post('/api/slots', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const validatedData = insertSlotSchema.parse(req.body);\n      const slot = await storage.createSlot(validatedData);\n      res.status(201).json(slot);\n    } catch (error) {\n      console.error(\"Error creating slot:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create slot\" });\n    }\n  });\n\n  // Booking routes\n  app.get('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n\n      let bookings;\n      if (user?.role === 'admin') {\n        // Admins can see all bookings\n        bookings = await storage.getAllBookings();\n      } else {\n        // Regular users can only see their own bookings\n        bookings = await storage.getUserBookings(userId);\n      }\n\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get('/api/bookings/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      const booking = await storage.getBooking(req.params.id);\n\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Users can only see their own bookings, admins can see all\n      if (user?.role !== 'admin' && booking.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  app.post('/api/bookings', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertBookingSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const booking = await storage.createBooking(validatedData);\n      \n      // Mark the slot as booked\n      await storage.updateSlotBookingStatus(validatedData.slotId, true);\n\n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.put('/api/bookings/:id/status', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const { status } = req.body;\n      const booking = await storage.updateBookingStatus(req.params.id, status);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ message: \"Failed to update booking status\" });\n    }\n  });\n\n  // Stripe payment routes\n  app.post(\"/api/create-payment-intent\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { amount, paymentMethod, bookingId } = req.body;\n      \n      if (paymentMethod === 'cash') {\n        // For cash payments, just confirm the booking\n        if (bookingId) {\n          await storage.updateBookingPaymentStatus(bookingId, 'pending');\n          await storage.updateBookingStatus(bookingId, 'confirmed');\n        }\n        return res.json({ \n          clientSecret: null, \n          paymentMethod: 'cash',\n          message: 'Booking confirmed for cash payment' \n        });\n      }\n\n      // For card payments, create Stripe payment intent\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert ZAR to cents\n        currency: \"zar\", // South African Rand\n        metadata: {\n          bookingId: bookingId || '',\n          userId: req.user.claims.sub,\n        },\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentMethod: 'card' \n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/confirm-payment\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { bookingId, paymentIntentId, paymentMethod } = req.body;\n\n      if (paymentMethod === 'cash') {\n        // For cash payments, mark as confirmed but payment pending\n        await storage.updateBookingPaymentStatus(bookingId, 'pending');\n        await storage.updateBookingStatus(bookingId, 'confirmed');\n      } else if (paymentIntentId) {\n        // For card payments, verify with Stripe\n        const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n        \n        if (paymentIntent.status === 'succeeded') {\n          await storage.updateBookingPaymentStatus(bookingId, 'paid');\n          await storage.updateBookingStatus(bookingId, 'confirmed');\n        }\n      }\n\n      const booking = await storage.getBooking(bookingId);\n      res.json({ booking });\n    } catch (error: any) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ message: \"Error confirming payment: \" + error.message });\n    }\n  });\n\n  // Review routes\n  app.get('/api/reviews', async (req, res) => {\n    try {\n      const { serviceId } = req.query;\n      let reviews;\n      \n      if (serviceId) {\n        reviews = await storage.getServiceReviews(serviceId as string);\n      } else {\n        reviews = await storage.getAllReviews();\n      }\n      \n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post('/api/reviews', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const validatedData = insertReviewSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const review = await storage.createReview(validatedData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.delete('/api/admin/users/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      await storage.deleteUser(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.get('/api/admin/analytics', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      \n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n\n      const analytics = await storage.getAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":13512},"server/mongodb-seed.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { connectMongoDB } from \"./mongodb\";\nimport { User, Service, Slot, Booking, Review } from \"@shared/mongoose-schema\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding MongoDB...\");\n\n  try {\n    await connectMongoDB();\n\n    // Create sample services with ZAR pricing\n    const servicesData = [\n      {\n        name: \"Basic Wash\",\n        description: \"Essential exterior wash with soap and rinse. Perfect for regular maintenance.\",\n        price: 149.99,\n        duration: 30,\n        category: \"basic\",\n        features: [\"Exterior wash\", \"Soap treatment\", \"Water rinse\", \"Basic dry\"],\n        isActive: true,\n      },\n      {\n        name: \"Premium Wash & Wax\",\n        description: \"Complete exterior treatment with premium wax protection and tire shine.\",\n        price: 299.99,\n        duration: 60,\n        category: \"premium\",\n        features: [\"Premium wash\", \"Wax protection\", \"Tire shine\", \"Interior vacuum\", \"Dashboard clean\"],\n        isActive: true,\n      },\n      {\n        name: \"Ultimate Detail\",\n        description: \"Full service detailing with interior deep clean and exterior polish.\",\n        price: 549.99,\n        duration: 120,\n        category: \"detailing\",\n        features: [\"Complete detail\", \"Interior deep clean\", \"Exterior polish\", \"Engine bay clean\", \"Leather treatment\", \"Paint protection\"],\n        isActive: true,\n      },\n      {\n        name: \"Express Wash\",\n        description: \"Quick 15-minute wash for busy schedules. External wash only.\",\n        price: 99.99,\n        duration: 15,\n        category: \"basic\",\n        features: [\"Quick exterior wash\", \"Rinse\", \"Speed dry\"],\n        isActive: true,\n      },\n      {\n        name: \"Interior Clean\",\n        description: \"Deep interior cleaning with vacuum, upholstery treatment, and detailing.\",\n        price: 199.99,\n        duration: 45,\n        category: \"premium\",\n        features: [\"Interior vacuum\", \"Upholstery clean\", \"Dashboard detail\", \"Glass cleaning\", \"Air freshener\"],\n        isActive: true,\n      },\n      {\n        name: \"Luxury Spa Treatment\",\n        description: \"The ultimate car care experience with premium products and hand finish.\",\n        price: 799.99,\n        duration: 180,\n        category: \"detailing\",\n        features: [\"Hand wash\", \"Clay bar treatment\", \"Paint correction\", \"Ceramic coating\", \"Full interior detail\", \"Engine detail\"],\n        isActive: true,\n      }\n    ];\n\n    // Clear existing data\n    await Service.deleteMany({});\n    await Slot.deleteMany({});\n    await Booking.deleteMany({});\n    await Review.deleteMany({});\n    \n    // Create services\n    const createdServices = await Service.insertMany(servicesData);\n    console.log(\"✅ Services created\");\n\n    // Create time slots for the next 30 days\n    const slotsData = [];\n    const today = new Date();\n    \n    for (let day = 1; day <= 30; day++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + day);\n      const dateString = date.toISOString().split('T')[0];\n\n      // Create slots for each service (8 AM to 6 PM, every 2 hours)\n      const times = [\n        { start: \"08:00\", end: \"10:00\" },\n        { start: \"10:00\", end: \"12:00\" },\n        { start: \"12:00\", end: \"14:00\" },\n        { start: \"14:00\", end: \"16:00\" },\n        { start: \"16:00\", end: \"18:00\" },\n      ];\n\n      for (const service of createdServices) {\n        for (const time of times) {\n          slotsData.push({\n            serviceId: service._id.toString(),\n            date: dateString,\n            startTime: time.start,\n            endTime: time.end,\n            isBooked: false,\n          });\n        }\n      }\n    }\n\n    await Slot.insertMany(slotsData);\n    console.log(\"✅ Time slots created\");\n\n    // Clear existing users\n    await User.deleteMany({});\n\n    // Create admin user with password\n    const adminPassword = await bcrypt.hash('admin123', 12);\n    await User.create({\n      email: 'admin@aquashine.co.za',\n      password: adminPassword,\n      firstName: 'Admin',\n      lastName: 'User',\n      role: 'admin',\n      phone: '+27 11 123 4567',\n      address: '123 Admin Street, Johannesburg, 2001',\n    });\n    console.log(\"✅ Admin user created (admin@aquashine.co.za / admin123)\");\n\n    // Create regular test user\n    const userPassword = await bcrypt.hash('user123', 12);\n    await User.create({\n      email: 'user@example.com',\n      password: userPassword,\n      firstName: 'John',\n      lastName: 'Doe',\n      role: 'user',\n      phone: '+27 11 987 6543',\n      address: '456 Oak Ave, Cape Town, 8001',\n    });\n    console.log(\"✅ Regular user created (user@example.com / user123)\");\n\n    console.log(\"🎉 MongoDB seeded successfully!\");\n    \n  } catch (error) {\n    console.error(\"❌ Error seeding MongoDB:\", error);\n    throw error;\n  }\n}\n\nexport default seed;\n\n// Run seed\nseed()\n  .then(() => {\n    console.log(\"✅ Seeding completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"❌ Seeding failed:\", error);\n    process.exit(1);\n  });","size_bytes":5042},"server/mongodb-storage.ts":{"content":"import {\n  User,\n  Service,\n  Slot,\n  Booking,\n  Review,\n  type UpsertUser,\n  type InsertService,\n  type InsertSlot,\n  type InsertBooking,\n  type InsertReview,\n  type IUser,\n  type IService,\n  type ISlot,\n  type IBooking,\n  type IReview,\n} from \"@shared/mongoose-schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<IUser | undefined>;\n  getUserByEmail(email: string): Promise<IUser | undefined>;\n  createUser(user: any): Promise<IUser>;\n  upsertUser(user: UpsertUser): Promise<IUser>;\n\n  // Service operations\n  getAllServices(): Promise<IService[]>;\n  getService(id: string): Promise<IService | undefined>;\n  createService(service: InsertService): Promise<IService>;\n  updateService(id: string, updates: Partial<InsertService>): Promise<IService>;\n  deleteService(id: string): Promise<void>;\n\n  // Slot operations\n  getSlotsByService(serviceId: string, date?: string): Promise<ISlot[]>;\n  getAvailableSlots(serviceId?: string, date?: string): Promise<ISlot[]>;\n  createSlot(slot: InsertSlot): Promise<ISlot>;\n  updateSlotBookingStatus(slotId: string, isBooked: boolean): Promise<ISlot>;\n\n  // Booking operations\n  getAllBookings(): Promise<IBooking[]>;\n  getUserBookings(userId: string): Promise<IBooking[]>;\n  getBooking(id: string): Promise<IBooking | undefined>;\n  createBooking(booking: InsertBooking): Promise<IBooking>;\n  updateBookingStatus(id: string, status: string): Promise<IBooking>;\n  updateBookingPaymentStatus(id: string, status: string): Promise<IBooking>;\n\n  // Review operations\n  getServiceReviews(serviceId: string): Promise<IReview[]>;\n  getAllReviews(): Promise<IReview[]>;\n  createReview(review: InsertReview): Promise<IReview>;\n\n  // Admin operations\n  getAllUsers(): Promise<IUser[]>;\n  deleteUser(id: string): Promise<void>;\n  getAnalytics(): Promise<any>;\n}\n\nexport class MongoDBStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<IUser | undefined> {\n    const user = await User.findById(id);\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<IUser | undefined> {\n    const user = await User.findOne({ email });\n    return user || undefined;\n  }\n\n  async createUser(userData: any): Promise<IUser> {\n    const user = new User(userData);\n    await user.save();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<IUser> {\n    const userId = userData.id;\n    delete userData.id; // Remove id from update data\n\n    const user = await User.findByIdAndUpdate(\n      userId,\n      { $set: userData },\n      { new: true, upsert: true, runValidators: true }\n    );\n    return user!;\n  }\n\n  // Service operations\n  async getAllServices(): Promise<IService[]> {\n    return await Service.find({ isActive: true })\n      .sort({ category: 1, price: 1 })\n      .exec();\n  }\n\n  async getService(id: string): Promise<IService | undefined> {\n    const service = await Service.findOne({ \n      _id: id, \n      isActive: true \n    }).exec();\n    return service || undefined;\n  }\n\n  async createService(service: InsertService): Promise<IService> {\n    const newService = new Service(service);\n    return await newService.save();\n  }\n\n  async updateService(id: string, updates: Partial<InsertService>): Promise<IService> {\n    const updatedService = await Service.findByIdAndUpdate(\n      id,\n      { $set: updates },\n      { new: true, runValidators: true }\n    );\n    if (!updatedService) {\n      throw new Error('Service not found');\n    }\n    return updatedService;\n  }\n\n  async deleteService(id: string): Promise<void> {\n    await Service.findByIdAndUpdate(id, { isActive: false });\n  }\n\n  // Slot operations\n  async getSlotsByService(serviceId: string, date?: string): Promise<ISlot[]> {\n    const query: any = { serviceId };\n    if (date) {\n      query.date = date;\n    }\n\n    return await Slot.find(query)\n      .sort({ date: 1, startTime: 1 })\n      .exec();\n  }\n\n  async getAvailableSlots(serviceId?: string, date?: string): Promise<ISlot[]> {\n    const query: any = { isBooked: false };\n    if (serviceId) {\n      query.serviceId = serviceId;\n    }\n    if (date) {\n      query.date = date;\n    }\n\n    return await Slot.find(query)\n      .sort({ date: 1, startTime: 1 })\n      .exec();\n  }\n\n  async createSlot(slot: InsertSlot): Promise<ISlot> {\n    const newSlot = new Slot(slot);\n    return await newSlot.save();\n  }\n\n  async updateSlotBookingStatus(slotId: string, isBooked: boolean): Promise<ISlot> {\n    const updatedSlot = await Slot.findByIdAndUpdate(\n      slotId,\n      { isBooked },\n      { new: true }\n    );\n    if (!updatedSlot) {\n      throw new Error('Slot not found');\n    }\n    return updatedSlot;\n  }\n\n  // Booking operations\n  async getAllBookings(): Promise<IBooking[]> {\n    return await Booking.find()\n      .sort({ createdAt: -1 })\n      .exec();\n  }\n\n  async getUserBookings(userId: string): Promise<IBooking[]> {\n    return await Booking.find({ userId })\n      .sort({ createdAt: -1 })\n      .exec();\n  }\n\n  async getBooking(id: string): Promise<IBooking | undefined> {\n    const booking = await Booking.findById(id).exec();\n    return booking || undefined;\n  }\n\n  async createBooking(booking: InsertBooking): Promise<IBooking> {\n    const newBooking = new Booking(booking);\n    return await newBooking.save();\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<IBooking> {\n    const updatedBooking = await Booking.findByIdAndUpdate(\n      id,\n      { status },\n      { new: true }\n    );\n    if (!updatedBooking) {\n      throw new Error('Booking not found');\n    }\n    return updatedBooking;\n  }\n\n  async updateBookingPaymentStatus(id: string, status: string): Promise<IBooking> {\n    const updatedBooking = await Booking.findByIdAndUpdate(\n      id,\n      { paymentStatus: status },\n      { new: true }\n    );\n    if (!updatedBooking) {\n      throw new Error('Booking not found');\n    }\n    return updatedBooking;\n  }\n\n  // Review operations\n  async getServiceReviews(serviceId: string): Promise<IReview[]> {\n    return await Review.find({ serviceId })\n      .sort({ createdAt: -1 })\n      .exec();\n  }\n\n  async getAllReviews(): Promise<IReview[]> {\n    return await Review.find()\n      .sort({ createdAt: -1 })\n      .exec();\n  }\n\n  async createReview(review: InsertReview): Promise<IReview> {\n    const newReview = new Review(review);\n    return await newReview.save();\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<IUser[]> {\n    return await User.find()\n      .sort({ createdAt: -1 })\n      .exec();\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await User.findByIdAndDelete(id);\n  }\n\n  async getAnalytics(): Promise<any> {\n    // Get analytics data for admin dashboard\n    const totalBookings = await Booking.countDocuments();\n    const totalUsers = await User.countDocuments();\n    \n    // Calculate total revenue from paid bookings\n    const revenueResult = await Booking.aggregate([\n      { $match: { paymentStatus: 'paid' } },\n      { $group: { _id: null, total: { $sum: '$totalAmount' } } }\n    ]);\n    const totalRevenue = revenueResult[0]?.total || 0;\n\n    // Get recent bookings\n    const recentBookings = await Booking.find()\n      .sort({ createdAt: -1 })\n      .limit(10)\n      .exec();\n\n    return {\n      totalBookings,\n      totalRevenue,\n      totalUsers,\n      recentBookings,\n    };\n  }\n}\n\nexport const storage = new MongoDBStorage();","size_bytes":7368},"server/mongodb.ts":{"content":"import mongoose from 'mongoose';\n\n// MongoDB connection\nexport async function connectMongoDB() {\n  try {\n    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/aquashine';\n    await mongoose.connect(mongoUri);\n    console.log('✅ Connected to MongoDB');\n  } catch (error) {\n    console.error('❌ MongoDB connection error:', error);\n    throw error;\n  }\n}\n\nexport { mongoose };","size_bytes":398},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { authenticateToken, requireAdmin, generateToken, hashPassword, comparePassword } from \"./auth\";\nimport { insertServiceSchema, insertSlotSchema, insertBookingSchema, insertReviewSchema, registerSchema, loginSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport Stripe from \"stripe\";\n\nif (!process.env.STRIPE_SECRET_KEY) {\n  throw new Error('Missing required Stripe secret: STRIPE_SECRET_KEY');\n}\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {\n  apiVersion: \"2023-10-16\",\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes (no JWT required)\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const validatedData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(validatedData.password);\n      \n      // Create user\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword,\n      });\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      \n      // Generate token\n      const token = generateToken({\n        id: user._id.toString(),\n        email: user.email,\n        role: user.role,\n      });\n\n      res.status(201).json({\n        user: userResponse,\n        token,\n      });\n    } catch (error) {\n      console.error(\"Error registering user:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      // Find user\n      const user = await storage.getUserByEmail(validatedData.email);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check password\n      const isValidPassword = await comparePassword(validatedData.password, user.password);\n      if (!isValidPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Remove password from response\n      const { password, ...userResponse } = user;\n      \n      // Generate token\n      const token = generateToken({\n        id: user._id.toString(),\n        email: user.email,\n        role: user.role,\n      });\n\n      res.json({\n        user: userResponse,\n        token,\n      });\n    } catch (error) {\n      console.error(\"Error logging in:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.get('/api/auth/user', authenticateToken, async (req: any, res) => {\n    try {\n      const { password, ...userResponse } = req.user;\n      res.json(userResponse);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Public service routes\n  app.get('/api/services', async (req, res) => {\n    try {\n      const services = await storage.getAllServices();\n      res.json(services);\n    } catch (error) {\n      console.error(\"Error fetching services:\", error);\n      res.status(500).json({ message: \"Failed to fetch services\" });\n    }\n  });\n\n  app.get('/api/services/:id', async (req, res) => {\n    try {\n      const service = await storage.getService(req.params.id);\n      if (!service) {\n        return res.status(404).json({ message: \"Service not found\" });\n      }\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error fetching service:\", error);\n      res.status(500).json({ message: \"Failed to fetch service\" });\n    }\n  });\n\n  // Admin-only service management\n  app.post('/api/services', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertServiceSchema.parse(req.body);\n      const service = await storage.createService(validatedData);\n      res.status(201).json(service);\n    } catch (error) {\n      console.error(\"Error creating service:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create service\" });\n    }\n  });\n\n  app.put('/api/services/:id', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertServiceSchema.partial().parse(req.body);\n      const service = await storage.updateService(req.params.id, validatedData);\n      res.json(service);\n    } catch (error) {\n      console.error(\"Error updating service:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to update service\" });\n    }\n  });\n\n  app.delete('/api/services/:id', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      await storage.deleteService(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting service:\", error);\n      res.status(500).json({ message: \"Failed to delete service\" });\n    }\n  });\n\n  // Slot management routes\n  app.get('/api/slots', async (req, res) => {\n    try {\n      const { serviceId, date } = req.query;\n      const slots = await storage.getSlotsByService(\n        serviceId as string,\n        date as string\n      );\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch slots\" });\n    }\n  });\n\n  app.get('/api/slots/available', async (req, res) => {\n    try {\n      const { serviceId, date } = req.query;\n      const slots = await storage.getAvailableSlots(\n        serviceId as string,\n        date as string\n      );\n      res.json(slots);\n    } catch (error) {\n      console.error(\"Error fetching available slots:\", error);\n      res.status(500).json({ message: \"Failed to fetch available slots\" });\n    }\n  });\n\n  // Admin-only slot creation\n  app.post('/api/slots', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const validatedData = insertSlotSchema.parse(req.body);\n      const slot = await storage.createSlot(validatedData);\n      res.status(201).json(slot);\n    } catch (error) {\n      console.error(\"Error creating slot:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create slot\" });\n    }\n  });\n\n  // Booking routes\n  app.get('/api/bookings', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user._id.toString();\n\n      let bookings;\n      if (req.user.role === 'admin') {\n        // Admins can see all bookings\n        bookings = await storage.getAllBookings();\n      } else {\n        // Regular users can only see their own bookings\n        bookings = await storage.getUserBookings(userId);\n      }\n\n      res.json(bookings);\n    } catch (error) {\n      console.error(\"Error fetching bookings:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookings\" });\n    }\n  });\n\n  app.get('/api/bookings/:id', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user._id.toString();\n      const booking = await storage.getBooking(req.params.id);\n\n      if (!booking) {\n        return res.status(404).json({ message: \"Booking not found\" });\n      }\n\n      // Users can only see their own bookings, admins can see all\n      if (req.user.role !== 'admin' && booking.userId !== userId) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error fetching booking:\", error);\n      res.status(500).json({ message: \"Failed to fetch booking\" });\n    }\n  });\n\n  app.post('/api/bookings', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user._id.toString();\n      const validatedData = insertBookingSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const booking = await storage.createBooking(validatedData);\n      \n      // Mark the slot as booked\n      await storage.updateSlotBookingStatus(validatedData.slotId, true);\n\n      res.status(201).json(booking);\n    } catch (error) {\n      console.error(\"Error creating booking:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create booking\" });\n    }\n  });\n\n  app.put('/api/bookings/:id/status', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const { status } = req.body;\n      const booking = await storage.updateBookingStatus(req.params.id, status);\n      res.json(booking);\n    } catch (error) {\n      console.error(\"Error updating booking status:\", error);\n      res.status(500).json({ message: \"Failed to update booking status\" });\n    }\n  });\n\n  // Stripe payment routes\n  app.post(\"/api/create-payment-intent\", authenticateToken, async (req: any, res) => {\n    try {\n      const { amount, paymentMethod, bookingId } = req.body;\n      \n      if (paymentMethod === 'cash') {\n        // For cash payments, just confirm the booking\n        if (bookingId) {\n          await storage.updateBookingPaymentStatus(bookingId, 'pending');\n          await storage.updateBookingStatus(bookingId, 'confirmed');\n        }\n        return res.json({ \n          clientSecret: null, \n          paymentMethod: 'cash',\n          message: 'Booking confirmed for cash payment' \n        });\n      }\n\n      // For card payments, create Stripe payment intent\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(amount * 100), // Convert ZAR to cents\n        currency: \"zar\", // South African Rand\n        metadata: {\n          bookingId: bookingId || '',\n          userId: req.user._id.toString(),\n        },\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentMethod: 'card' \n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  app.post(\"/api/confirm-payment\", authenticateToken, async (req: any, res) => {\n    try {\n      const { bookingId, paymentIntentId, paymentMethod } = req.body;\n\n      if (paymentMethod === 'cash') {\n        // For cash payments, mark as confirmed but payment pending\n        await storage.updateBookingPaymentStatus(bookingId, 'pending');\n        await storage.updateBookingStatus(bookingId, 'confirmed');\n      } else if (paymentIntentId) {\n        // For card payments, verify with Stripe\n        const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n        \n        if (paymentIntent.status === 'succeeded') {\n          await storage.updateBookingPaymentStatus(bookingId, 'paid');\n          await storage.updateBookingStatus(bookingId, 'confirmed');\n        }\n      }\n\n      const booking = await storage.getBooking(bookingId);\n      res.json({ booking });\n    } catch (error: any) {\n      console.error(\"Error confirming payment:\", error);\n      res.status(500).json({ message: \"Error confirming payment: \" + error.message });\n    }\n  });\n\n  // Review routes\n  app.get('/api/reviews', async (req, res) => {\n    try {\n      const { serviceId } = req.query;\n      let reviews;\n      \n      if (serviceId) {\n        reviews = await storage.getServiceReviews(serviceId as string);\n      } else {\n        reviews = await storage.getAllReviews();\n      }\n      \n      res.json(reviews);\n    } catch (error) {\n      console.error(\"Error fetching reviews:\", error);\n      res.status(500).json({ message: \"Failed to fetch reviews\" });\n    }\n  });\n\n  app.post('/api/reviews', authenticateToken, async (req: any, res) => {\n    try {\n      const userId = req.user._id.toString();\n      const validatedData = insertReviewSchema.parse({\n        ...req.body,\n        userId,\n      });\n\n      const review = await storage.createReview(validatedData);\n      res.status(201).json(review);\n    } catch (error) {\n      console.error(\"Error creating review:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"Failed to create review\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      // Remove passwords from response\n      const usersWithoutPasswords = users.map(({ password, ...user }) => user);\n      res.json(usersWithoutPasswords);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.delete('/api/admin/users/:id', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      await storage.deleteUser(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ message: \"Failed to delete user\" });\n    }\n  });\n\n  app.get('/api/admin/analytics', authenticateToken, requireAdmin, async (req: any, res) => {\n    try {\n      const analytics = await storage.getAnalytics();\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":14331},"server/seed.ts":{"content":"import bcrypt from 'bcryptjs';\nimport { db } from \"./db\";\nimport { users, services, slots, bookings, reviews } from \"@shared/schema\";\nimport { sql } from \"drizzle-orm\";\n\nasync function seed() {\n  console.log(\"🌱 Seeding database...\");\n\n  try {\n    // Clear existing data (in order due to foreign key constraints)\n    await db.delete(reviews);\n    await db.delete(bookings);\n    await db.delete(slots);\n    await db.delete(services);\n    await db.delete(users);\n    console.log(\"✅ Cleared existing data\");\n\n    // Create admin user with password\n    const adminPassword = await bcrypt.hash('admin123', 12);\n    const adminUser = await db\n      .insert(users)\n      .values({\n        email: \"admin@aquashine.co.za\",\n        password: adminPassword,\n        firstName: \"Admin\",\n        lastName: \"User\",\n        role: \"admin\",\n        phone: \"+27 11 123 4567\",\n        address: \"123 Admin Street, Johannesburg, 2001\",\n      })\n      .returning();\n\n    console.log(\"✅ Admin user created (admin@aquashine.co.za / admin123)\");\n\n    // Create regular test user\n    const userPassword = await bcrypt.hash('user123', 12);\n    const regularUser = await db\n      .insert(users)\n      .values({\n        email: \"user@example.com\",\n        password: userPassword,\n        firstName: \"John\",\n        lastName: \"Doe\",\n        role: \"user\",\n        phone: \"+27 11 987 6543\",\n        address: \"456 Oak Ave, Cape Town, 8001\",\n      })\n      .returning();\n\n    console.log(\"✅ Regular user created (user@example.com / user123)\");\n\n    // Create services with ZAR pricing\n    const servicesData = [\n      {\n        name: \"Basic Wash\",\n        description: \"Essential exterior wash with soap and rinse. Perfect for regular maintenance.\",\n        price: \"149.99\",\n        duration: 30,\n        category: \"basic\",\n        features: [\"Exterior wash\", \"Soap treatment\", \"Water rinse\", \"Basic dry\"],\n        isActive: true,\n      },\n      {\n        name: \"Premium Wash & Wax\",\n        description: \"Complete exterior treatment with premium wax protection and tire shine.\",\n        price: \"299.99\",\n        duration: 60,\n        category: \"premium\",\n        features: [\"Premium wash\", \"Wax protection\", \"Tire shine\", \"Interior vacuum\", \"Dashboard clean\"],\n        isActive: true,\n      },\n      {\n        name: \"Ultimate Detail\",\n        description: \"Full service detailing with interior deep clean and exterior polish.\",\n        price: \"549.99\",\n        duration: 120,\n        category: \"detailing\",\n        features: [\"Complete detail\", \"Interior deep clean\", \"Exterior polish\", \"Engine bay clean\", \"Leather treatment\", \"Paint protection\"],\n        isActive: true,\n      },\n      {\n        name: \"Express Wash\",\n        description: \"Quick 15-minute wash for busy schedules. External wash only.\",\n        price: \"99.99\",\n        duration: 15,\n        category: \"basic\",\n        features: [\"Quick exterior wash\", \"Rinse\", \"Speed dry\"],\n        isActive: true,\n      },\n      {\n        name: \"Interior Clean\",\n        description: \"Deep interior cleaning with vacuum, upholstery treatment, and detailing.\",\n        price: \"199.99\",\n        duration: 45,\n        category: \"premium\",\n        features: [\"Interior vacuum\", \"Upholstery clean\", \"Dashboard detail\", \"Glass cleaning\", \"Air freshener\"],\n        isActive: true,\n      },\n      {\n        name: \"Luxury Spa Treatment\",\n        description: \"The ultimate car care experience with premium products and hand finish.\",\n        price: \"799.99\",\n        duration: 180,\n        category: \"detailing\",\n        features: [\"Hand wash\", \"Clay bar treatment\", \"Paint correction\", \"Ceramic coating\", \"Full interior detail\", \"Engine detail\"],\n        isActive: true,\n      }\n    ];\n\n    const createdServices = await db\n      .insert(services)\n      .values(servicesData)\n      .returning();\n\n    console.log(\"✅ Services created\");\n\n    // Create time slots for the next 30 days\n    const slotsData = [];\n    const today = new Date();\n    \n    for (let day = 1; day <= 30; day++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + day);\n      const dateString = date.toISOString().split('T')[0];\n\n      // Create slots for each service (8 AM to 6 PM, every 2 hours)\n      const times = [\n        { start: \"08:00\", end: \"10:00\" },\n        { start: \"10:00\", end: \"12:00\" },\n        { start: \"12:00\", end: \"14:00\" },\n        { start: \"14:00\", end: \"16:00\" },\n        { start: \"16:00\", end: \"18:00\" },\n      ];\n\n      for (const service of createdServices) {\n        for (const time of times) {\n          slotsData.push({\n            serviceId: service.id,\n            date: dateString,\n            startTime: time.start,\n            endTime: time.end,\n            isBooked: false,\n          });\n        }\n      }\n    }\n\n    await db.insert(slots).values(slotsData);\n    console.log(\"✅ Time slots created\");\n\n    // Skip reviews for now (they require bookings to exist first)\n\n    console.log('\\n📋 Test Credentials:');\n    console.log('Admin: admin@aquashine.co.za / admin123');\n    console.log('User:  user@example.com / user123');\n\n    console.log(\"🎉 Database seeded successfully!\");\n    \n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\nexport default seed;\n\n// Run the seed function\nconsole.log('🚀 Starting seed process...');\nseed()\n  .then(() => {\n    console.log('✅ Seeding completed successfully');\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error('❌ Seeding failed:', error);\n    process.exit(1);\n  });","size_bytes":5539},"server/storage.ts":{"content":"import {\n  users,\n  services,\n  slots,\n  bookings,\n  reviews,\n  type User,\n  type UpsertUser,\n  type Service,\n  type InsertService,\n  type Slot,\n  type InsertSlot,\n  type Booking,\n  type InsertBooking,\n  type Review,\n  type InsertReview,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, isNull, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Service operations\n  getAllServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, updates: Partial<InsertService>): Promise<Service>;\n  deleteService(id: string): Promise<void>;\n\n  // Slot operations\n  getSlotsByService(serviceId: string, date?: string): Promise<Slot[]>;\n  getAvailableSlots(serviceId?: string, date?: string): Promise<Slot[]>;\n  createSlot(slot: InsertSlot): Promise<Slot>;\n  updateSlotBookingStatus(slotId: string, isBooked: boolean): Promise<Slot>;\n\n  // Booking operations\n  getAllBookings(): Promise<Booking[]>;\n  getUserBookings(userId: string): Promise<Booking[]>;\n  getBooking(id: string): Promise<Booking | undefined>;\n  createBooking(booking: InsertBooking): Promise<Booking>;\n  updateBookingStatus(id: string, status: string): Promise<Booking>;\n  updateBookingPaymentStatus(id: string, status: string): Promise<Booking>;\n\n  // Review operations\n  getServiceReviews(serviceId: string): Promise<Review[]>;\n  getAllReviews(): Promise<Review[]>;\n  createReview(review: InsertReview): Promise<Review>;\n\n  // Admin operations\n  getAllUsers(): Promise<User[]>;\n  deleteUser(id: string): Promise<void>;\n  getAnalytics(): Promise<any>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Service operations\n  async getAllServices(): Promise<Service[]> {\n    return await db\n      .select()\n      .from(services)\n      .where(eq(services.isActive, true))\n      .orderBy(asc(services.category), asc(services.price));\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    const [service] = await db\n      .select()\n      .from(services)\n      .where(and(eq(services.id, id), eq(services.isActive, true)));\n    return service;\n  }\n\n  async createService(service: InsertService): Promise<Service> {\n    const [newService] = await db\n      .insert(services)\n      .values(service)\n      .returning();\n    return newService;\n  }\n\n  async updateService(id: string, updates: Partial<InsertService>): Promise<Service> {\n    const [updatedService] = await db\n      .update(services)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(services.id, id))\n      .returning();\n    return updatedService;\n  }\n\n  async deleteService(id: string): Promise<void> {\n    await db\n      .update(services)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(services.id, id));\n  }\n\n  // Slot operations\n  async getSlotsByService(serviceId: string, date?: string): Promise<Slot[]> {\n    const conditions = [eq(slots.serviceId, serviceId)];\n    if (date) {\n      conditions.push(eq(slots.date, date));\n    }\n\n    return await db\n      .select()\n      .from(slots)\n      .where(and(...conditions))\n      .orderBy(asc(slots.date), asc(slots.startTime));\n  }\n\n  async getAvailableSlots(serviceId?: string, date?: string): Promise<Slot[]> {\n    const conditions = [eq(slots.isBooked, false)];\n    if (serviceId) {\n      conditions.push(eq(slots.serviceId, serviceId));\n    }\n    if (date) {\n      conditions.push(eq(slots.date, date));\n    }\n\n    return await db\n      .select()\n      .from(slots)\n      .where(and(...conditions))\n      .orderBy(asc(slots.date), asc(slots.startTime));\n  }\n\n  async createSlot(slot: InsertSlot): Promise<Slot> {\n    const [newSlot] = await db\n      .insert(slots)\n      .values(slot)\n      .returning();\n    return newSlot;\n  }\n\n  async updateSlotBookingStatus(slotId: string, isBooked: boolean): Promise<Slot> {\n    const [updatedSlot] = await db\n      .update(slots)\n      .set({ isBooked })\n      .where(eq(slots.id, slotId))\n      .returning();\n    return updatedSlot;\n  }\n\n  // Booking operations\n  async getAllBookings(): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async getUserBookings(userId: string): Promise<Booking[]> {\n    return await db\n      .select()\n      .from(bookings)\n      .where(eq(bookings.userId, userId))\n      .orderBy(desc(bookings.createdAt));\n  }\n\n  async getBooking(id: string): Promise<Booking | undefined> {\n    const [booking] = await db\n      .select()\n      .from(bookings)\n      .where(eq(bookings.id, id));\n    return booking;\n  }\n\n  async createBooking(booking: InsertBooking): Promise<Booking> {\n    const [newBooking] = await db\n      .insert(bookings)\n      .values(booking)\n      .returning();\n    return newBooking;\n  }\n\n  async updateBookingStatus(id: string, status: string): Promise<Booking> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set({ status, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking;\n  }\n\n  async updateBookingPaymentStatus(id: string, status: string): Promise<Booking> {\n    const [updatedBooking] = await db\n      .update(bookings)\n      .set({ paymentStatus: status, updatedAt: new Date() })\n      .where(eq(bookings.id, id))\n      .returning();\n    return updatedBooking;\n  }\n\n  // Review operations\n  async getServiceReviews(serviceId: string): Promise<Review[]> {\n    return await db\n      .select()\n      .from(reviews)\n      .where(eq(reviews.serviceId, serviceId))\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async getAllReviews(): Promise<Review[]> {\n    return await db\n      .select()\n      .from(reviews)\n      .orderBy(desc(reviews.createdAt));\n  }\n\n  async createReview(review: InsertReview): Promise<Review> {\n    const [newReview] = await db\n      .insert(reviews)\n      .values(review)\n      .returning();\n    return newReview;\n  }\n\n  // Admin operations\n  async getAllUsers(): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.createdAt));\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    // In a real app, you might want to soft delete or handle related data\n    await db.delete(users).where(eq(users.id, id));\n  }\n\n  async getAnalytics(): Promise<any> {\n    // Get analytics data for admin dashboard\n    const totalBookings = await db\n      .select({ count: sql`count(*)` })\n      .from(bookings);\n    \n    const totalRevenue = await db\n      .select({ \n        revenue: sql`sum(${bookings.totalAmount})`.mapWith((value) => parseFloat(value || '0'))\n      })\n      .from(bookings)\n      .where(eq(bookings.paymentStatus, 'paid'));\n    \n    const totalUsers = await db\n      .select({ count: sql`count(*)` })\n      .from(users);\n\n    const recentBookings = await db\n      .select()\n      .from(bookings)\n      .orderBy(desc(bookings.createdAt))\n      .limit(10);\n\n    return {\n      totalBookings: parseInt(totalBookings[0]?.count?.toString() || '0'),\n      totalRevenue: totalRevenue[0]?.revenue || 0,\n      totalUsers: parseInt(totalUsers[0]?.count?.toString() || '0'),\n      recentBookings,\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":7891},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/mongoose-schema.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { z } from 'zod';\n\n// User interface and schema\nexport interface IUser extends Document {\n  _id: string;\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  role: string;\n  phone?: string;\n  address?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst userSchema = new Schema<IUser>({\n  email: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  firstName: String,\n  lastName: String,\n  profileImageUrl: String,\n  role: { type: String, default: 'user' },\n  phone: String,\n  address: String,\n}, {\n  timestamps: true,\n});\n\nexport const User = mongoose.model<IUser>('User', userSchema);\n\n// Service interface and schema\nexport interface IService extends Document {\n  _id: string;\n  name: string;\n  description: string;\n  price: number;\n  duration: number;\n  category: string;\n  features: string[];\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst serviceSchema = new Schema<IService>({\n  name: { type: String, required: true },\n  description: { type: String, required: true },\n  price: { type: Number, required: true },\n  duration: { type: Number, required: true },\n  category: { type: String, default: 'basic' },\n  features: [String],\n  isActive: { type: Boolean, default: true },\n}, {\n  timestamps: true,\n});\n\nexport const Service = mongoose.model<IService>('Service', serviceSchema);\n\n// Slot interface and schema\nexport interface ISlot extends Document {\n  _id: string;\n  serviceId: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  isBooked: boolean;\n  createdAt: Date;\n}\n\nconst slotSchema = new Schema<ISlot>({\n  serviceId: { type: String, required: true, ref: 'Service' },\n  date: { type: String, required: true },\n  startTime: { type: String, required: true },\n  endTime: { type: String, required: true },\n  isBooked: { type: Boolean, default: false },\n}, {\n  timestamps: { createdAt: true, updatedAt: false },\n});\n\nexport const Slot = mongoose.model<ISlot>('Slot', slotSchema);\n\n// Booking interface and schema\nexport interface IBooking extends Document {\n  _id: string;\n  userId: string;\n  serviceId: string;\n  slotId: string;\n  vehicleType: string;\n  vehicleBrand: string;\n  vehicleModel: string;\n  manufacturingYear: number;\n  registrationPlate: string;\n  status: string;\n  totalAmount: number;\n  paymentStatus: string;\n  paymentMethod?: string;\n  stripePaymentIntentId?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nconst bookingSchema = new Schema<IBooking>({\n  userId: { type: String, required: true, ref: 'User' },\n  serviceId: { type: String, required: true, ref: 'Service' },\n  slotId: { type: String, required: true, ref: 'Slot' },\n  vehicleType: { type: String, required: true },\n  vehicleBrand: { type: String, required: true },\n  vehicleModel: { type: String, required: true },\n  manufacturingYear: { type: Number, required: true },\n  registrationPlate: { type: String, required: true },\n  status: { type: String, default: 'pending' },\n  totalAmount: { type: Number, required: true },\n  paymentStatus: { type: String, default: 'pending' },\n  paymentMethod: String,\n  stripePaymentIntentId: String,\n}, {\n  timestamps: true,\n});\n\nexport const Booking = mongoose.model<IBooking>('Booking', bookingSchema);\n\n// Review interface and schema\nexport interface IReview extends Document {\n  _id: string;\n  userId: string;\n  serviceId: string;\n  bookingId: string;\n  rating: number;\n  comment?: string;\n  createdAt: Date;\n}\n\nconst reviewSchema = new Schema<IReview>({\n  userId: { type: String, required: true, ref: 'User' },\n  serviceId: { type: String, required: true, ref: 'Service' },\n  bookingId: { type: String, required: true, ref: 'Booking' },\n  rating: { type: Number, required: true, min: 1, max: 5 },\n  comment: String,\n}, {\n  timestamps: { createdAt: true, updatedAt: false },\n});\n\nexport const Review = mongoose.model<IReview>('Review', reviewSchema);\n\n// Zod validation schemas\nexport const insertUserSchema = z.object({\n  email: z.string().email().optional(),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  profileImageUrl: z.string().optional(),\n  role: z.string().default('user'),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\nexport const insertServiceSchema = z.object({\n  name: z.string().min(1),\n  description: z.string().min(1),\n  price: z.number().positive(),\n  duration: z.number().positive(),\n  category: z.string().default('basic'),\n  features: z.array(z.string()).default([]),\n  isActive: z.boolean().default(true),\n});\n\nexport const insertSlotSchema = z.object({\n  serviceId: z.string().min(1),\n  date: z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\n  startTime: z.string().regex(/^\\d{2}:\\d{2}$/),\n  endTime: z.string().regex(/^\\d{2}:\\d{2}$/),\n  isBooked: z.boolean().default(false),\n});\n\nexport const insertBookingSchema = z.object({\n  userId: z.string().min(1),\n  serviceId: z.string().min(1),\n  slotId: z.string().min(1),\n  vehicleType: z.enum(['car', 'suv', 'truck', 'van', 'motorcycle']),\n  vehicleBrand: z.enum(['Toyota', 'Honda', 'Ford', 'BMW', 'Mercedes', 'Audi', 'Nissan', 'Hyundai', 'Tata', 'Runner', 'Other']),\n  vehicleModel: z.string().min(1),\n  manufacturingYear: z.number().min(1900).max(new Date().getFullYear() + 1),\n  registrationPlate: z.string().min(1),\n  totalAmount: z.number().positive(),\n  paymentMethod: z.enum(['cash', 'card']).optional(),\n});\n\nexport const insertReviewSchema = z.object({\n  userId: z.string().min(1),\n  serviceId: z.string().min(1),\n  bookingId: z.string().min(1),\n  rating: z.number().min(1).max(5),\n  comment: z.string().optional(),\n});\n\n// Auth schemas\nexport const registerSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof insertUserSchema> & { id?: string };\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type InsertSlot = z.infer<typeof insertSlotSchema>;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\n\n// Export types for compatibility\nexport type {\n  IUser as User,\n  IService as Service,\n  ISlot as Slot,\n  IBooking as Booking,\n  IReview as Review,\n};","size_bytes":6523},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (JWT Authentication)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").default(\"user\"), // 'user' or 'admin'\n  phone: varchar(\"phone\"),\n  address: text(\"address\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Vehicle enums\nexport const vehicleTypeEnum = pgEnum('vehicle_type', ['car', 'suv', 'truck', 'van', 'motorcycle']);\nexport const vehicleBrandEnum = pgEnum('vehicle_brand', ['Toyota', 'Honda', 'Ford', 'BMW', 'Mercedes', 'Audi', 'Nissan', 'Hyundai', 'Tata', 'Runner', 'Other']);\n\n// Services table\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  duration: integer(\"duration\").notNull(), // in minutes\n  category: varchar(\"category\").default(\"basic\"), // basic, premium, detailing\n  features: text(\"features\").array(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Service slots table\nexport const slots = pgTable(\"slots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  date: varchar(\"date\").notNull(), // YYYY-MM-DD format\n  startTime: varchar(\"start_time\").notNull(), // HH:MM format\n  endTime: varchar(\"end_time\").notNull(), // HH:MM format\n  isBooked: boolean(\"is_booked\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Bookings table\nexport const bookings = pgTable(\"bookings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  slotId: varchar(\"slot_id\").references(() => slots.id).notNull(),\n  vehicleType: vehicleTypeEnum(\"vehicle_type\").notNull(),\n  vehicleBrand: vehicleBrandEnum(\"vehicle_brand\").notNull(),\n  vehicleModel: varchar(\"vehicle_model\").notNull(),\n  manufacturingYear: integer(\"manufacturing_year\").notNull(),\n  registrationPlate: varchar(\"registration_plate\").notNull(),\n  status: varchar(\"status\").default(\"pending\"), // pending, confirmed, in-progress, completed, cancelled\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  paymentStatus: varchar(\"payment_status\").default(\"pending\"), // pending, paid, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Reviews table\nexport const reviews = pgTable(\"reviews\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  serviceId: varchar(\"service_id\").references(() => services.id).notNull(),\n  bookingId: varchar(\"booking_id\").references(() => bookings.id).notNull(),\n  rating: integer(\"rating\").notNull(), // 1-5\n  comment: text(\"comment\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bookings: many(bookings),\n  reviews: many(reviews),\n}));\n\nexport const servicesRelations = relations(services, ({ many }) => ({\n  slots: many(slots),\n  bookings: many(bookings),\n  reviews: many(reviews),\n}));\n\nexport const slotsRelations = relations(slots, ({ one, many }) => ({\n  service: one(services, {\n    fields: [slots.serviceId],\n    references: [services.id],\n  }),\n  bookings: many(bookings),\n}));\n\nexport const bookingsRelations = relations(bookings, ({ one }) => ({\n  user: one(users, {\n    fields: [bookings.userId],\n    references: [users.id],\n  }),\n  service: one(services, {\n    fields: [bookings.serviceId],\n    references: [services.id],\n  }),\n  slot: one(slots, {\n    fields: [bookings.slotId],\n    references: [slots.id],\n  }),\n  review: one(reviews, {\n    fields: [bookings.id],\n    references: [reviews.bookingId],\n  }),\n}));\n\nexport const reviewsRelations = relations(reviews, ({ one }) => ({\n  user: one(users, {\n    fields: [reviews.userId],\n    references: [users.id],\n  }),\n  service: one(services, {\n    fields: [reviews.serviceId],\n    references: [services.id],\n  }),\n  booking: one(bookings, {\n    fields: [reviews.bookingId],\n    references: [bookings.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSlotSchema = createInsertSchema(slots).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertBookingSchema = createInsertSchema(bookings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertReviewSchema = createInsertSchema(reviews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Service = typeof services.$inferSelect;\nexport type InsertSlot = z.infer<typeof insertSlotSchema>;\nexport type Slot = typeof slots.$inferSelect;\nexport type InsertBooking = z.infer<typeof insertBookingSchema>;\nexport type Booking = typeof bookings.$inferSelect;\nexport type InsertReview = z.infer<typeof insertReviewSchema>;\nexport type Review = typeof reviews.$inferSelect;\n","size_bytes":6431},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Services from \"@/pages/services\";\nimport Booking from \"@/pages/booking\";\nimport Reviews from \"@/pages/reviews\";\nimport Comparison from \"@/pages/comparison\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminServices from \"@/pages/admin/services\";\nimport AdminBookings from \"@/pages/admin/bookings\";\nimport Checkout from \"@/pages/checkout\";\nimport CheckoutSuccess from \"@/pages/checkout-success\";\nimport Login from \"@/pages/auth/login\";\nimport Register from \"@/pages/auth/register\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-slate-800 to-teal-800 flex items-center justify-center\">\n        <div className=\"glass-effect p-8 rounded-3xl\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <div className=\"text-foreground text-lg font-semibold\">Loading...</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {/* Auth routes - always available */}\n      <Route path=\"/auth/login\" component={Login} />\n      <Route path=\"/auth/register\" component={Register} />\n      \n      {!isAuthenticated ? (\n        <>\n          <Route path=\"/\" component={Landing} />\n          <Route path=\"/services\" component={Services} />\n          <Route path=\"/reviews\" component={Reviews} />\n          <Route path=\"/comparison\" component={Comparison} />\n        </>\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/services\" component={Services} />\n          <Route path=\"/booking\" component={Booking} />\n          <Route path=\"/checkout\" component={Checkout} />\n          <Route path=\"/checkout/success\" component={CheckoutSuccess} />\n          <Route path=\"/reviews\" component={Reviews} />\n          <Route path=\"/comparison\" component={Comparison} />\n          {user?.role === 'admin' && (\n            <>\n              <Route path=\"/admin/dashboard\" component={AdminDashboard} />\n              <Route path=\"/admin/services\" component={AdminServices} />\n              <Route path=\"/admin/bookings\" component={AdminBookings} />\n            </>\n          )}\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-gradient-to-br from-slate-950 via-slate-800 to-teal-800\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3083},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(222, 84%, 4%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4%, 0.3);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(172, 66%, 50%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(217, 91%, 60%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(187, 85%, 53%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(172, 66%, 50%);\n  --radius: 12px;\n  --chart-1: hsl(172, 66%, 50%);\n  --chart-2: hsl(217, 91%, 60%);\n  --chart-3: hsl(187, 85%, 53%);\n  --chart-4: hsl(200, 95%, 60%);\n  --chart-5: hsl(160, 84%, 39%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, -apple-system, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --spacing: 0.25rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', system-ui, -apple-system, sans-serif;\n  }\n}\n\n@layer components {\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  .glass-dark {\n    background: rgba(15, 23, 42, 0.8);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .text-gradient {\n    background: linear-gradient(135deg, hsl(172, 66%, 50%), hsl(187, 85%, 53%));\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .floating-card {\n    transform: translateY(0);\n    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .floating-card:hover {\n    transform: translateY(-10px);\n    box-shadow: 0 25px 50px -12px rgba(6, 182, 212, 0.25);\n  }\n\n  .ripple-effect {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .ripple-effect::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 0;\n    height: 0;\n    border-radius: 50%;\n    background: rgba(255, 255, 255, 0.3);\n    transform: translate(-50%, -50%);\n    transition: width 0.6s, height 0.6s;\n  }\n\n  .ripple-effect:active::before {\n    width: 300px;\n    height: 300px;\n  }\n\n  .service-card {\n    perspective: 1000px;\n  }\n\n  .service-card-inner {\n    transition: transform 0.6s;\n    transform-style: preserve-3d;\n  }\n\n  .service-card:hover .service-card-inner {\n    transform: rotateY(10deg) rotateX(5deg);\n  }\n\n  .parallax-bg {\n    background-attachment: fixed;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n  }\n\n  @media (max-width: 768px) {\n    .parallax-bg {\n      background-attachment: scroll;\n    }\n  }\n\n  .loading-skeleton {\n    background: linear-gradient(90deg, rgba(255,255,255,0.1) 25%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0.1) 75%);\n    background-size: 200% 100%;\n    animation: loading 1.5s infinite;\n  }\n\n  .progress-bar {\n    position: relative;\n    overflow: hidden;\n  }\n\n  .progress-bar::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);\n    animation: shimmer 2s infinite;\n  }\n}\n\n@layer utilities {\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  .animate-glow {\n    animation: glow 2s ease-in-out infinite alternate;\n  }\n\n  .animate-ripple {\n    animation: ripple 0.6s linear;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.8s ease-out;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 1s ease-out;\n  }\n\n  .animate-bounce-subtle {\n    animation: bounceSubtle 2s ease-in-out infinite;\n  }\n}\n\n@keyframes float {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n}\n\n@keyframes glow {\n  0% { box-shadow: 0 0 20px rgba(6, 182, 212, 0.3); }\n  100% { box-shadow: 0 0 40px rgba(6, 182, 212, 0.6); }\n}\n\n@keyframes ripple {\n  0% { transform: scale(0); opacity: 1; }\n  100% { transform: scale(4); opacity: 0; }\n}\n\n@keyframes slideUp {\n  0% { transform: translateY(100px); opacity: 0; }\n  100% { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes fadeIn {\n  0% { opacity: 0; }\n  100% { opacity: 1; }\n}\n\n@keyframes bounceSubtle {\n  0%, 100% { transform: translateY(0px); }\n  50% { transform: translateY(-10px); }\n}\n\n@keyframes loading {\n  0% { background-position: 200% 0; }\n  100% { background-position: -200% 0; }\n}\n\n@keyframes shimmer {\n  0% { left: -100%; }\n  100% { left: 100%; }\n}\n","size_bytes":5295},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/BookingModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { X, Calendar, Clock, Car } from \"lucide-react\";\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  duration: number;\n}\n\ninterface Slot {\n  id: string;\n  serviceId: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  isBooked: boolean;\n}\n\ninterface BookingModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedService?: Service;\n}\n\nexport default function BookingModal({ isOpen, onClose, selectedService }: BookingModalProps) {\n  const [step, setStep] = useState(1);\n  const [selectedSlot, setSelectedSlot] = useState<Slot | null>(null);\n  const [bookingData, setBookingData] = useState({\n    vehicleType: \"\",\n    vehicleBrand: \"\",\n    vehicleModel: \"\",\n    manufacturingYear: \"\",\n    registrationPlate: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: availableSlots, isLoading: slotsLoading } = useQuery({\n    queryKey: [\"/api/slots/availability\", selectedService?.id],\n    enabled: !!selectedService?.id,\n  });\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/bookings\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Confirmed!\",\n        description: \"Your appointment has been scheduled successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      onClose();\n      resetForm();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setStep(1);\n    setSelectedSlot(null);\n    setBookingData({\n      vehicleType: \"\",\n      vehicleBrand: \"\",\n      vehicleModel: \"\",\n      manufacturingYear: \"\",\n      registrationPlate: \"\",\n    });\n  };\n\n  const handleSlotSelect = (slot: Slot) => {\n    setSelectedSlot(slot);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setBookingData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSubmit = () => {\n    if (!selectedService || !selectedSlot) return;\n\n    const bookingPayload = {\n      serviceId: selectedService.id,\n      slotId: selectedSlot.id,\n      vehicleType: bookingData.vehicleType,\n      vehicleBrand: bookingData.vehicleBrand,\n      vehicleModel: bookingData.vehicleModel,\n      manufacturingYear: parseInt(bookingData.manufacturingYear),\n      registrationPlate: bookingData.registrationPlate,\n      totalAmount: selectedService.price,\n    };\n\n    bookingMutation.mutate(bookingPayload);\n  };\n\n  const canProceedToStep2 = selectedSlot !== null;\n  const canSubmit = Object.values(bookingData).every(value => value !== \"\");\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"glass-effect border-border max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center justify-between\">\n            Book Your Service\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              data-testid=\"button-close-modal\"\n            >\n              <X className=\"w-4 h-4\" />\n            </Button>\n          </DialogTitle>\n        </DialogHeader>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-semibold ${\n              step >= 1 ? 'bg-gradient-to-r from-primary to-accent' : 'bg-muted'\n            }`}>\n              1\n            </div>\n            <span className=\"text-sm font-medium\">Select Slot</span>\n          </div>\n          <div className=\"flex-1 h-1 bg-muted mx-4 rounded-full\">\n            <div className={`h-1 bg-gradient-to-r from-primary to-accent rounded-full transition-all duration-500 ${\n              step >= 2 ? 'w-full' : 'w-0'\n            }`}></div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center text-white font-semibold ${\n              step >= 2 ? 'bg-gradient-to-r from-primary to-accent' : 'bg-muted'\n            }`}>\n              2\n            </div>\n            <span className=\"text-sm font-medium\">Vehicle Details</span>\n          </div>\n        </div>\n\n        {/* Step 1: Slot Selection */}\n        {step === 1 && (\n          <div className=\"space-y-6\">\n            {selectedService && (\n              <div className=\"glass-effect p-4 rounded-xl\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3 className=\"font-semibold text-lg\" data-testid=\"selected-service-name\">\n                      {selectedService.name}\n                    </h3>\n                    <p className=\"text-muted-foreground text-sm\">{selectedService.description}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-gradient\" data-testid=\"selected-service-price\">\n                      ${selectedService.price}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground flex items-center\">\n                      <Clock className=\"w-4 h-4 mr-1\" />\n                      {selectedService.duration} min\n                    </div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            <div>\n              <Label className=\"text-base font-semibold mb-4 block\">Select Available Time Slot</Label>\n              {slotsLoading ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 4 }).map((_, i) => (\n                    <div key={i} className=\"glass-effect p-4 rounded-xl animate-pulse\">\n                      <div className=\"flex justify-between\">\n                        <div className=\"space-y-2\">\n                          <div className=\"h-4 bg-muted rounded w-32\"></div>\n                          <div className=\"h-3 bg-muted rounded w-24\"></div>\n                        </div>\n                        <div className=\"h-8 bg-muted rounded w-20\"></div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : availableSlots?.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No available slots for this service. Please try again later.\n                </div>\n              ) : (\n                <div className=\"space-y-3 max-h-64 overflow-y-auto\">\n                  {availableSlots?.map((slot: Slot) => (\n                    <div\n                      key={slot.id}\n                      onClick={() => handleSlotSelect(slot)}\n                      className={`glass-effect p-4 rounded-xl cursor-pointer transition-all duration-300 ${\n                        selectedSlot?.id === slot.id\n                          ? 'ring-2 ring-primary bg-primary/10'\n                          : 'hover:bg-white/10'\n                      }`}\n                      data-testid={`slot-${slot.id}`}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-3 h-3 bg-green-400 rounded-full animate-bounce-subtle\"></div>\n                          <div>\n                            <div className=\"font-semibold flex items-center space-x-2\">\n                              <Calendar className=\"w-4 h-4\" />\n                              <span>{slot.date}</span>\n                            </div>\n                            <div className=\"text-sm text-muted-foreground flex items-center space-x-2\">\n                              <Clock className=\"w-4 h-4\" />\n                              <span>{slot.startTime} - {slot.endTime}</span>\n                            </div>\n                          </div>\n                        </div>\n                        <Badge className=\"bg-green-500/20 text-green-400\">Available</Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex justify-end space-x-4\">\n              <Button\n                variant=\"outline\"\n                onClick={onClose}\n                className=\"glass-effect border-border hover:bg-white/20\"\n                data-testid=\"button-cancel-step1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => setStep(2)}\n                disabled={!canProceedToStep2}\n                className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                data-testid=\"button-continue-step2\"\n              >\n                Continue\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Step 2: Vehicle Details */}\n        {step === 2 && (\n          <div className=\"space-y-6\">\n            <div className=\"glass-effect p-4 rounded-xl\">\n              <h3 className=\"font-semibold text-lg mb-2\">Selected Slot</h3>\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <Calendar className=\"w-5 h-5 text-primary\" />\n                  <span>{selectedSlot?.date}</span>\n                  <Clock className=\"w-5 h-5 text-primary\" />\n                  <span>{selectedSlot?.startTime} - {selectedSlot?.endTime}</span>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setStep(1)}\n                  data-testid=\"button-change-slot\"\n                >\n                  Change\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"vehicleType\">Vehicle Type</Label>\n                <Select\n                  value={bookingData.vehicleType}\n                  onValueChange={(value) => handleInputChange('vehicleType', value)}\n                >\n                  <SelectTrigger className=\"glass-effect border-border\" data-testid=\"select-vehicle-type\">\n                    <SelectValue placeholder=\"Select vehicle type\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"car\">Car</SelectItem>\n                    <SelectItem value=\"suv\">SUV</SelectItem>\n                    <SelectItem value=\"truck\">Truck</SelectItem>\n                    <SelectItem value=\"van\">Van</SelectItem>\n                    <SelectItem value=\"motorcycle\">Motorcycle</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"vehicleBrand\">Vehicle Brand</Label>\n                <Select\n                  value={bookingData.vehicleBrand}\n                  onValueChange={(value) => handleInputChange('vehicleBrand', value)}\n                >\n                  <SelectTrigger className=\"glass-effect border-border\" data-testid=\"select-vehicle-brand\">\n                    <SelectValue placeholder=\"Select brand\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Toyota\">Toyota</SelectItem>\n                    <SelectItem value=\"Honda\">Honda</SelectItem>\n                    <SelectItem value=\"Ford\">Ford</SelectItem>\n                    <SelectItem value=\"BMW\">BMW</SelectItem>\n                    <SelectItem value=\"Mercedes\">Mercedes</SelectItem>\n                    <SelectItem value=\"Audi\">Audi</SelectItem>\n                    <SelectItem value=\"Nissan\">Nissan</SelectItem>\n                    <SelectItem value=\"Hyundai\">Hyundai</SelectItem>\n                    <SelectItem value=\"Tata\">Tata</SelectItem>\n                    <SelectItem value=\"Runner\">Runner</SelectItem>\n                    <SelectItem value=\"Other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"vehicleModel\">Vehicle Model</Label>\n                <Input\n                  id=\"vehicleModel\"\n                  placeholder=\"e.g., Camry\"\n                  value={bookingData.vehicleModel}\n                  onChange={(e) => handleInputChange('vehicleModel', e.target.value)}\n                  className=\"glass-effect border-border\"\n                  data-testid=\"input-vehicle-model\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"manufacturingYear\">Manufacturing Year</Label>\n                <Input\n                  id=\"manufacturingYear\"\n                  type=\"number\"\n                  placeholder=\"2020\"\n                  value={bookingData.manufacturingYear}\n                  onChange={(e) => handleInputChange('manufacturingYear', e.target.value)}\n                  className=\"glass-effect border-border\"\n                  data-testid=\"input-manufacturing-year\"\n                />\n              </div>\n\n              <div className=\"md:col-span-2\">\n                <Label htmlFor=\"registrationPlate\">Registration Plate</Label>\n                <Input\n                  id=\"registrationPlate\"\n                  placeholder=\"ABC123\"\n                  value={bookingData.registrationPlate}\n                  onChange={(e) => handleInputChange('registrationPlate', e.target.value)}\n                  className=\"glass-effect border-border\"\n                  data-testid=\"input-registration-plate\"\n                />\n              </div>\n            </div>\n\n            <div className=\"flex justify-between space-x-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setStep(1)}\n                className=\"glass-effect border-border hover:bg-white/20\"\n                data-testid=\"button-back-step1\"\n              >\n                Back\n              </Button>\n              <div className=\"flex space-x-4\">\n                <Button\n                  variant=\"outline\"\n                  onClick={onClose}\n                  className=\"glass-effect border-border hover:bg-white/20\"\n                  data-testid=\"button-cancel-step2\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  onClick={handleSubmit}\n                  disabled={!canSubmit || bookingMutation.isPending}\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                  data-testid=\"button-confirm-booking\"\n                >\n                  {bookingMutation.isPending ? 'Booking...' : 'Confirm Booking'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15696},"client/src/components/ReviewCard.tsx":{"content":"import { Star, User } from \"lucide-react\";\nimport { FloatingCard } from \"@/components/ui/floating-card\";\n\ninterface Review {\n  id: string;\n  rating: number;\n  comment: string;\n  user: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n    profileImageUrl?: string;\n  };\n  service: {\n    name: string;\n  };\n  createdAt: string;\n}\n\ninterface ReviewCardProps {\n  review: Review;\n}\n\nexport default function ReviewCard({ review }: ReviewCardProps) {\n  const renderStars = (rating: number) => {\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`w-4 h-4 ${\n          i < rating \n            ? \"text-yellow-400 fill-current\" \n            : \"text-muted-foreground\"\n        }`}\n      />\n    ));\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getUserDisplayName = () => {\n    if (review.user.firstName && review.user.lastName) {\n      return `${review.user.firstName} ${review.user.lastName}`;\n    }\n    if (review.user.firstName) {\n      return review.user.firstName;\n    }\n    return review.user.email?.split('@')[0] || 'Anonymous User';\n  };\n\n  return (\n    <FloatingCard className=\"p-8\" data-testid={`review-card-${review.id}`}>\n      <div className=\"flex items-center mb-6\">\n        <div className=\"flex text-yellow-400 mr-4\" data-testid={`review-rating-${review.id}`}>\n          {renderStars(review.rating)}\n        </div>\n        <span className=\"text-sm text-muted-foreground\">{review.rating}.0</span>\n      </div>\n      \n      <p className=\"text-lg mb-6 leading-relaxed\" data-testid={`review-comment-${review.id}`}>\n        {review.comment}\n      </p>\n      \n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          {review.user.profileImageUrl ? (\n            <img \n              src={review.user.profileImageUrl} \n              alt=\"Customer photo\" \n              className=\"w-12 h-12 rounded-full object-cover\"\n              data-testid={`review-avatar-${review.id}`}\n            />\n          ) : (\n            <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-primary to-accent flex items-center justify-center\">\n              <User className=\"text-white w-6 h-6\" />\n            </div>\n          )}\n          <div>\n            <div className=\"font-semibold\" data-testid={`review-user-name-${review.id}`}>\n              {getUserDisplayName()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\" data-testid={`review-service-${review.id}`}>\n              {review.service.name}\n            </div>\n          </div>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-sm text-muted-foreground\" data-testid={`review-date-${review.id}`}>\n            {formatDate(review.createdAt)}\n          </div>\n        </div>\n      </div>\n    </FloatingCard>\n  );\n}\n","size_bytes":3002},"client/src/components/ServiceCard.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport BookingModal from \"./BookingModal\";\nimport { Car, Clock, Star, Sparkles } from \"lucide-react\";\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  duration: number;\n  category: string;\n  features?: string[];\n}\n\ninterface ServiceCardProps {\n  service: Service;\n}\n\nexport default function ServiceCard({ service }: ServiceCardProps) {\n  const [isBookingModalOpen, setIsBookingModalOpen] = useState(false);\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'premium':\n        return <Sparkles className=\"text-white\" />;\n      case 'detailing':\n        return <Star className=\"text-white\" />;\n      default:\n        return <Car className=\"text-white\" />;\n    }\n  };\n\n  const getCategoryGradient = (category: string) => {\n    switch (category) {\n      case 'premium':\n        return 'from-primary to-accent';\n      case 'detailing':\n        return 'from-accent to-secondary';\n      default:\n        return 'from-green-500 to-primary';\n    }\n  };\n\n  return (\n    <>\n      <div className=\"service-card group\">\n        <div className=\"service-card-inner glass-effect p-8 rounded-3xl floating-card relative overflow-hidden\">\n          <div className={`absolute inset-0 bg-gradient-to-br ${getCategoryGradient(service.category)}/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500`}></div>\n          \n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className={`w-16 h-16 bg-gradient-to-r ${getCategoryGradient(service.category)} rounded-2xl flex items-center justify-center group-hover:scale-110 transition-transform duration-300`}>\n                {getCategoryIcon(service.category)}\n              </div>\n              <Badge \n                variant=\"secondary\" \n                className=\"bg-muted/50 text-muted-foreground capitalize\"\n                data-testid={`service-category-${service.id}`}\n              >\n                {service.category}\n              </Badge>\n            </div>\n\n            <h3 className=\"text-2xl font-bold mb-4\" data-testid={`service-name-${service.id}`}>\n              {service.name}\n            </h3>\n            <p className=\"text-muted-foreground mb-6\" data-testid={`service-description-${service.id}`}>\n              {service.description}\n            </p>\n            \n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-3xl font-bold text-gradient\" data-testid={`service-price-${service.id}`}>\n                  ${service.price}\n                </span>\n                <div className=\"text-sm text-muted-foreground\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span data-testid={`service-duration-${service.id}`}>{service.duration} min</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Features */}\n            {service.features && service.features.length > 0 && (\n              <div className=\"mb-6\">\n                <div className=\"flex flex-wrap gap-2\">\n                  {service.features.slice(0, 3).map((feature, index) => (\n                    <Badge \n                      key={index}\n                      variant=\"outline\" \n                      className=\"text-xs border-primary/30 text-primary\"\n                      data-testid={`service-feature-${service.id}-${index}`}\n                    >\n                      {feature}\n                    </Badge>\n                  ))}\n                  {service.features.length > 3 && (\n                    <Badge variant=\"outline\" className=\"text-xs border-muted text-muted-foreground\">\n                      +{service.features.length - 3} more\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-1\">\n                <div className=\"flex text-yellow-400\">\n                  <Star className=\"w-4 h-4 fill-current\" />\n                  <Star className=\"w-4 h-4 fill-current\" />\n                  <Star className=\"w-4 h-4 fill-current\" />\n                  <Star className=\"w-4 h-4 fill-current\" />\n                  <Star className=\"w-4 h-4 fill-current\" />\n                </div>\n                <span className=\"text-sm text-muted-foreground\">4.9 (124)</span>\n              </div>\n              <Button\n                onClick={() => setIsBookingModalOpen(true)}\n                className={`ripple-effect bg-gradient-to-r ${getCategoryGradient(service.category)} text-primary-foreground px-6 py-2 rounded-lg font-semibold hover:shadow-lg transition-all duration-300`}\n                data-testid={`button-quick-book-${service.id}`}\n              >\n                Quick Book\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <BookingModal\n        isOpen={isBookingModalOpen}\n        onClose={() => setIsBookingModalOpen(false)}\n        selectedService={service}\n      />\n    </>\n  );\n}\n","size_bytes":5375},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    queryFn: async () => {\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        throw new Error(\"No token found\");\n      }\n      \n      const response = await fetch(\"/api/auth/user\", {\n        headers: {\n          \"Authorization\": `Bearer ${token}`,\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error(\"Failed to fetch user\");\n      }\n      \n      return response.json();\n    },\n    retry: false,\n  });\n\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/auth/login\";\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    logout,\n  };\n}\n","size_bytes":857},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1540},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/booking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Footer from \"@/components/layout/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { FloatingCard } from \"@/components/ui/floating-card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useRouter } from \"wouter\";\nimport { Calendar, Clock, Car, ChevronLeft, ChevronRight, Check } from \"lucide-react\";\nimport { useEffect } from \"react\";\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  duration: number;\n  category: string;\n}\n\ninterface Slot {\n  id: string;\n  serviceId: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  isBooked: boolean;\n}\n\nexport default function Booking() {\n  const [selectedService, setSelectedService] = useState<Service | null>(null);\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [selectedSlot, setSelectedSlot] = useState<Slot | null>(null);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [bookingData, setBookingData] = useState({\n    vehicleType: \"\",\n    vehicleBrand: \"\",\n    vehicleModel: \"\",\n    manufacturingYear: \"\",\n    registrationPlate: \"\",\n  });\n\n  const { toast } = useToast();\n  const { isAuthenticated } = useAuth();\n  const queryClient = useQueryClient();\n  const router = useRouter();\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: availableSlots, isLoading: slotsLoading } = useQuery({\n    queryKey: [\"/api/slots/availability\", selectedService?.id, selectedDate],\n    enabled: !!selectedService?.id && !!selectedDate,\n  });\n\n  const { data: userBookings = [] } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated,\n  });\n\n  useEffect(() => {\n    if (!isAuthenticated) {\n      toast({\n        title: \"Authentication Required\",\n        description: \"Please sign in to book a service.\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = '/api/login';\n      }, 1500);\n    }\n  }, [isAuthenticated, toast]);\n\n  const bookingMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/bookings\", data);\n    },\n    onSuccess: (response) => {\n      toast({\n        title: \"Booking Created!\",\n        description: \"Redirecting to payment...\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/slots/availability\"] });\n      \n      // Redirect to checkout with booking ID\n      router(`/checkout?booking_id=${response.id}`);\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Booking Failed\",\n        description: error.message || \"Failed to create booking. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetBooking = () => {\n    setSelectedService(null);\n    setSelectedDate(\"\");\n    setSelectedSlot(null);\n    setBookingData({\n      vehicleType: \"\",\n      vehicleBrand: \"\",\n      vehicleModel: \"\",\n      manufacturingYear: \"\",\n      registrationPlate: \"\",\n    });\n  };\n\n  const generateCalendarDays = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const today = new Date();\n    \n    const days = [];\n    \n    // Add empty cells for days before month starts\n    for (let i = 0; i < firstDay.getDay(); i++) {\n      days.push(null);\n    }\n    \n    // Add days of the month\n    for (let day = 1; day <= lastDay.getDate(); day++) {\n      const date = new Date(year, month, day);\n      const isPast = date < today;\n      const isToday = date.toDateString() === today.toDateString();\n      const dateString = date.toISOString().split('T')[0];\n      \n      days.push({\n        day,\n        date: dateString,\n        isPast,\n        isToday,\n        isSelected: selectedDate === dateString\n      });\n    }\n    \n    return days;\n  };\n\n  const handleDateSelect = (dateString: string) => {\n    setSelectedDate(dateString);\n    setSelectedSlot(null);\n  };\n\n  const handleSlotSelect = (slot: Slot) => {\n    setSelectedSlot(slot);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setBookingData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSubmit = () => {\n    if (!selectedService || !selectedSlot) return;\n\n    const bookingPayload = {\n      serviceId: selectedService.id,\n      slotId: selectedSlot.id,\n      vehicleType: bookingData.vehicleType,\n      vehicleBrand: bookingData.vehicleBrand,\n      vehicleModel: bookingData.vehicleModel,\n      manufacturingYear: parseInt(bookingData.manufacturingYear),\n      registrationPlate: bookingData.registrationPlate,\n      totalAmount: selectedService.price,\n    };\n\n    bookingMutation.mutate(bookingPayload);\n  };\n\n  const canSubmit = selectedService && selectedSlot && Object.values(bookingData).every(value => value !== \"\");\n\n  const calendarDays = generateCalendarDays();\n  const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center\">\n              <GlassCard className=\"p-12 max-w-md mx-auto\">\n                <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <div className=\"text-lg font-semibold\">Redirecting to sign in...</div>\n              </GlassCard>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Header Section */}\n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"text-gradient\">Book Your Service</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Choose your preferred service and time slot for the ultimate car care experience\n            </p>\n          </div>\n\n          {/* Recent Bookings */}\n          {userBookings?.length > 0 && (\n            <GlassCard className=\"p-6 mb-12\">\n              <h3 className=\"text-xl font-bold mb-4\">Your Recent Bookings</h3>\n              <div className=\"space-y-3\">\n                {userBookings.slice(0, 3).map((booking: any) => (\n                  <div key={booking.id} className=\"flex items-center justify-between p-4 glass-effect rounded-xl\">\n                    <div>\n                      <div className=\"font-semibold\">{booking.service?.name}</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        {booking.vehicleBrand} {booking.vehicleModel} • {booking.slot?.date}\n                      </div>\n                    </div>\n                    <Badge className={\n                      booking.status === 'completed' ? 'bg-green-500/20 text-green-400' :\n                      booking.status === 'confirmed' ? 'bg-blue-500/20 text-blue-400' :\n                      booking.status === 'in-progress' ? 'bg-yellow-500/20 text-yellow-400' :\n                      'bg-gray-500/20 text-gray-400'\n                    }>\n                      {booking.status}\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </GlassCard>\n          )}\n\n          {/* Step 1: Service Selection */}\n          <div className=\"mb-12\">\n            <h2 className=\"text-3xl font-bold mb-6\">\n              <span className=\"flex items-center\">\n                <span className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center text-white font-semibold mr-3\">1</span>\n                Choose Your Service\n              </span>\n            </h2>\n            \n            {servicesLoading ? (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {Array.from({ length: 6 }).map((_, i) => (\n                  <GlassCard key={i} className=\"p-6 animate-pulse\">\n                    <div className=\"space-y-4\">\n                      <div className=\"w-16 h-16 bg-muted rounded-2xl\"></div>\n                      <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                      <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    </div>\n                  </GlassCard>\n                ))}\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {services?.map((service: Service) => (\n                  <FloatingCard\n                    key={service.id}\n                    className={`p-6 cursor-pointer transition-all duration-300 ${\n                      selectedService?.id === service.id\n                        ? 'ring-2 ring-primary bg-primary/10'\n                        : 'hover:bg-white/10'\n                    }`}\n                    onClick={() => setSelectedService(service)}\n                    data-testid={`service-card-${service.id}`}\n                  >\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n                        <Car className=\"text-white\" />\n                      </div>\n                      {selectedService?.id === service.id && (\n                        <Check className=\"w-6 h-6 text-primary\" />\n                      )}\n                    </div>\n                    <h3 className=\"text-xl font-bold mb-2\">{service.name}</h3>\n                    <p className=\"text-muted-foreground text-sm mb-4\">{service.description}</p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-2xl font-bold text-gradient\">${service.price}</span>\n                      <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                        <Clock className=\"w-4 h-4\" />\n                        <span className=\"text-sm\">{service.duration} min</span>\n                      </div>\n                    </div>\n                  </FloatingCard>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Step 2: Date & Time Selection */}\n          {selectedService && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-3xl font-bold mb-6\">\n                <span className=\"flex items-center\">\n                  <span className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center text-white font-semibold mr-3\">2</span>\n                  Select Date & Time\n                </span>\n              </h2>\n\n              <div className=\"grid lg:grid-cols-2 gap-8\">\n                {/* Calendar */}\n                <GlassCard className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-6\">\n                    <h3 className=\"text-xl font-bold\">Select Date</h3>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1))}\n                        data-testid=\"button-prev-month\"\n                      >\n                        <ChevronLeft className=\"w-4 h-4\" />\n                      </Button>\n                      <span className=\"font-semibold text-lg px-4\">\n                        {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n                      </span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1))}\n                        data-testid=\"button-next-month\"\n                      >\n                        <ChevronRight className=\"w-4 h-4\" />\n                      </Button>\n                    </div>\n                  </div>\n\n                  <div className=\"grid grid-cols-7 gap-2\">\n                    {['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'].map(day => (\n                      <div key={day} className=\"text-center p-3 text-muted-foreground font-medium\">\n                        {day}\n                      </div>\n                    ))}\n                    {calendarDays.map((day, index) => (\n                      <div key={index} className=\"aspect-square\">\n                        {day && (\n                          <button\n                            onClick={() => handleDateSelect(day.date)}\n                            disabled={day.isPast}\n                            className={`w-full h-full p-2 rounded-xl text-center transition-all duration-300 ${\n                              day.isPast\n                                ? 'text-muted-foreground cursor-not-allowed opacity-50'\n                                : day.isSelected\n                                ? 'bg-gradient-to-r from-primary to-accent text-primary-foreground font-semibold'\n                                : day.isToday\n                                ? 'bg-muted text-foreground font-semibold'\n                                : 'hover:bg-white/10'\n                            }`}\n                            data-testid={`calendar-day-${day.day}`}\n                          >\n                            {day.day}\n                          </button>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </GlassCard>\n\n                {/* Time Slots */}\n                <GlassCard className=\"p-6\">\n                  <h3 className=\"text-xl font-bold mb-6\">Available Time Slots</h3>\n                  {!selectedDate ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Calendar className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                      <p>Please select a date to view available time slots</p>\n                    </div>\n                  ) : slotsLoading ? (\n                    <div className=\"space-y-3\">\n                      {Array.from({ length: 4 }).map((_, i) => (\n                        <div key={i} className=\"glass-effect p-4 rounded-xl animate-pulse\">\n                          <div className=\"flex justify-between\">\n                            <div className=\"space-y-2\">\n                              <div className=\"h-4 bg-muted rounded w-32\"></div>\n                              <div className=\"h-3 bg-muted rounded w-24\"></div>\n                            </div>\n                            <div className=\"h-8 bg-muted rounded w-20\"></div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : availableSlots?.length === 0 ? (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Clock className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                      <p>No available slots for this date</p>\n                      <p className=\"text-sm\">Please try selecting a different date</p>\n                    </div>\n                  ) : (\n                    <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n                      {availableSlots?.map((slot: Slot) => (\n                        <div\n                          key={slot.id}\n                          onClick={() => handleSlotSelect(slot)}\n                          className={`glass-effect p-4 rounded-xl cursor-pointer transition-all duration-300 ${\n                            selectedSlot?.id === slot.id\n                              ? 'ring-2 ring-primary bg-primary/10'\n                              : 'hover:bg-white/10'\n                          }`}\n                          data-testid={`time-slot-${slot.id}`}\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"w-3 h-3 bg-green-400 rounded-full animate-bounce-subtle\"></div>\n                              <div>\n                                <div className=\"font-semibold flex items-center space-x-2\">\n                                  <Clock className=\"w-4 h-4\" />\n                                  <span>{slot.startTime} - {slot.endTime}</span>\n                                </div>\n                                <div className=\"text-sm text-muted-foreground\">\n                                  {selectedService.name}\n                                </div>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Badge className=\"bg-green-500/20 text-green-400\">Available</Badge>\n                              {selectedSlot?.id === slot.id && (\n                                <Check className=\"w-5 h-5 text-primary\" />\n                              )}\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </GlassCard>\n              </div>\n            </div>\n          )}\n\n          {/* Step 3: Vehicle Details */}\n          {selectedService && selectedSlot && (\n            <div className=\"mb-12\">\n              <h2 className=\"text-3xl font-bold mb-6\">\n                <span className=\"flex items-center\">\n                  <span className=\"w-8 h-8 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center text-white font-semibold mr-3\">3</span>\n                  Vehicle Details\n                </span>\n              </h2>\n\n              <GlassCard className=\"p-8\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label htmlFor=\"vehicleType\">Vehicle Type</Label>\n                    <Select\n                      value={bookingData.vehicleType}\n                      onValueChange={(value) => handleInputChange('vehicleType', value)}\n                    >\n                      <SelectTrigger className=\"glass-effect border-border\" data-testid=\"select-vehicle-type\">\n                        <SelectValue placeholder=\"Select vehicle type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"car\">Car</SelectItem>\n                        <SelectItem value=\"suv\">SUV</SelectItem>\n                        <SelectItem value=\"truck\">Truck</SelectItem>\n                        <SelectItem value=\"van\">Van</SelectItem>\n                        <SelectItem value=\"motorcycle\">Motorcycle</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"vehicleBrand\">Vehicle Brand</Label>\n                    <Select\n                      value={bookingData.vehicleBrand}\n                      onValueChange={(value) => handleInputChange('vehicleBrand', value)}\n                    >\n                      <SelectTrigger className=\"glass-effect border-border\" data-testid=\"select-vehicle-brand\">\n                        <SelectValue placeholder=\"Select brand\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Toyota\">Toyota</SelectItem>\n                        <SelectItem value=\"Honda\">Honda</SelectItem>\n                        <SelectItem value=\"Ford\">Ford</SelectItem>\n                        <SelectItem value=\"BMW\">BMW</SelectItem>\n                        <SelectItem value=\"Mercedes\">Mercedes</SelectItem>\n                        <SelectItem value=\"Audi\">Audi</SelectItem>\n                        <SelectItem value=\"Nissan\">Nissan</SelectItem>\n                        <SelectItem value=\"Hyundai\">Hyundai</SelectItem>\n                        <SelectItem value=\"Tata\">Tata</SelectItem>\n                        <SelectItem value=\"Runner\">Runner</SelectItem>\n                        <SelectItem value=\"Other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"vehicleModel\">Vehicle Model</Label>\n                    <Input\n                      id=\"vehicleModel\"\n                      placeholder=\"e.g., Camry\"\n                      value={bookingData.vehicleModel}\n                      onChange={(e) => handleInputChange('vehicleModel', e.target.value)}\n                      className=\"glass-effect border-border\"\n                      data-testid=\"input-vehicle-model\"\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"manufacturingYear\">Manufacturing Year</Label>\n                    <Input\n                      id=\"manufacturingYear\"\n                      type=\"number\"\n                      placeholder=\"2020\"\n                      value={bookingData.manufacturingYear}\n                      onChange={(e) => handleInputChange('manufacturingYear', e.target.value)}\n                      className=\"glass-effect border-border\"\n                      data-testid=\"input-manufacturing-year\"\n                    />\n                  </div>\n\n                  <div className=\"md:col-span-2\">\n                    <Label htmlFor=\"registrationPlate\">Registration Plate</Label>\n                    <Input\n                      id=\"registrationPlate\"\n                      placeholder=\"ABC123\"\n                      value={bookingData.registrationPlate}\n                      onChange={(e) => handleInputChange('registrationPlate', e.target.value)}\n                      className=\"glass-effect border-border\"\n                      data-testid=\"input-registration-plate\"\n                    />\n                  </div>\n                </div>\n\n                {/* Booking Summary */}\n                <div className=\"mt-8 pt-8 border-t border-border\">\n                  <h4 className=\"text-lg font-semibold mb-4\">Booking Summary</h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between\">\n                      <span>Service:</span>\n                      <span className=\"font-medium\">{selectedService.name}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Date & Time:</span>\n                      <span className=\"font-medium\">\n                        {selectedDate} at {selectedSlot.startTime} - {selectedSlot.endTime}\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Duration:</span>\n                      <span className=\"font-medium\">{selectedService.duration} minutes</span>\n                    </div>\n                    <div className=\"flex justify-between text-lg font-bold\">\n                      <span>Total Amount:</span>\n                      <span className=\"text-gradient\">${selectedService.price}</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-4 mt-8\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={resetBooking}\n                    className=\"glass-effect border-border hover:bg-white/20\"\n                    data-testid=\"button-reset-booking\"\n                  >\n                    Start Over\n                  </Button>\n                  <Button\n                    onClick={handleSubmit}\n                    disabled={!canSubmit || bookingMutation.isPending}\n                    className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground px-8\"\n                    data-testid=\"button-confirm-booking\"\n                  >\n                    {bookingMutation.isPending ? 'Booking...' : 'Confirm Booking'}\n                  </Button>\n                </div>\n              </GlassCard>\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":25571},"client/src/pages/checkout-success.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useRouter } from 'wouter';\nimport Navigation from '@/components/layout/Navigation';\nimport Footer from '@/components/layout/Footer';\nimport { Button } from '@/components/ui/button';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Check, Calendar, Clock, Car, Home } from 'lucide-react';\n\nexport default function CheckoutSuccess() {\n  const [location] = useLocation();\n  const [, navigate] = useRouter();\n  const { toast } = useToast();\n  const [isConfirming, setIsConfirming] = useState(true);\n  const [bookingConfirmed, setBookingConfirmed] = useState(false);\n\n  // Get booking and payment details from URL\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const bookingId = urlParams.get('booking_id');\n  const paymentIntentId = urlParams.get('payment_intent');\n\n  useEffect(() => {\n    if (!bookingId) {\n      toast({\n        title: \"Invalid Request\",\n        description: \"No booking information found. Redirecting to booking page.\",\n        variant: \"destructive\",\n      });\n      router('/booking');\n      return;\n    }\n\n    const confirmPayment = async () => {\n      try {\n        if (paymentIntentId) {\n          // Confirm card payment with Stripe\n          await apiRequest('POST', '/api/confirm-payment', {\n            bookingId,\n            paymentIntentId,\n          });\n        }\n        \n        setBookingConfirmed(true);\n        toast({\n          title: \"Payment Successful!\",\n          description: \"Your booking has been confirmed. You'll receive a confirmation email shortly.\",\n        });\n      } catch (error) {\n        toast({\n          title: \"Payment Confirmation Failed\",\n          description: \"There was an issue confirming your payment. Please contact support.\",\n          variant: \"destructive\",\n        });\n        navigate('/booking');\n      } finally {\n        setIsConfirming(false);\n      }\n    };\n\n    confirmPayment();\n  }, [bookingId, paymentIntentId, router, toast]);\n\n  if (isConfirming) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center\">\n              <GlassCard className=\"p-12 max-w-md mx-auto\">\n                <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <div className=\"text-lg font-semibold\">Confirming your payment...</div>\n                <p className=\"text-muted-foreground mt-2\">Please wait while we process your booking</p>\n              </GlassCard>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-2xl mx-auto text-center\">\n            \n            {/* Success Message */}\n            <GlassCard className=\"p-12 mb-8\">\n              <div className=\"w-20 h-20 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-6\">\n                <Check className=\"w-10 h-10 text-white\" />\n              </div>\n              \n              <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n                <span className=\"text-gradient\">Booking Confirmed!</span>\n              </h1>\n              \n              <p className=\"text-xl text-muted-foreground mb-8\">\n                Thank you for choosing AquaShine! Your car wash service has been successfully booked.\n              </p>\n\n              {/* Booking Reference */}\n              <div className=\"bg-white/5 rounded-xl p-6 mb-8\">\n                <h3 className=\"text-lg font-semibold mb-2\">Booking Reference</h3>\n                <div className=\"font-mono text-2xl text-primary font-bold\">\n                  #{bookingId?.slice(-8).toUpperCase()}\n                </div>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Please keep this reference number for your records\n                </p>\n              </div>\n\n              {/* What's Next */}\n              <div className=\"text-left space-y-4 mb-8\">\n                <h3 className=\"text-lg font-semibold text-center mb-4\">What happens next?</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <span className=\"text-primary text-sm font-bold\">1</span>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">Confirmation Email</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        You'll receive a confirmation email with all booking details\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <span className=\"text-primary text-sm font-bold\">2</span>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">Reminder Call</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        We'll call you 24 hours before your appointment\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"w-6 h-6 bg-primary/20 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5\">\n                      <span className=\"text-primary text-sm font-bold\">3</span>\n                    </div>\n                    <div>\n                      <div className=\"font-semibold\">Service Day</div>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Arrive 10 minutes early with your vehicle keys\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Action Buttons */}\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Button \n                  onClick={() => router('/')}\n                  className=\"bg-gradient-to-r from-primary to-accent text-white\"\n                  data-testid=\"button-go-home\"\n                >\n                  <Home className=\"w-4 h-4 mr-2\" />\n                  Go Home\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => router('/booking')}\n                  data-testid=\"button-book-another\"\n                >\n                  <Calendar className=\"w-4 h-4 mr-2\" />\n                  Book Another Service\n                </Button>\n              </div>\n            </GlassCard>\n\n            {/* Contact Information */}\n            <GlassCard className=\"p-6\">\n              <h3 className=\"text-lg font-semibold mb-4\">Need Help?</h3>\n              <p className=\"text-muted-foreground mb-4\">\n                If you have any questions about your booking or need to make changes, \n                don't hesitate to contact us.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center text-sm\">\n                <div className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-4 h-4\" />\n                  <span>Mon-Sat: 8:00 AM - 6:00 PM</span>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Car className=\"w-4 h-4\" />\n                  <span>Phone: +27 11 123 4567</span>\n                </div>\n              </div>\n            </GlassCard>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":8220},"client/src/pages/checkout.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { useStripe, useElements, PaymentElement, Elements } from '@stripe/react-stripe-js';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLocation } from 'wouter';\nimport { useRouter } from 'wouter';\nimport Navigation from '@/components/layout/Navigation';\nimport Footer from '@/components/layout/Footer';\nimport { Button } from '@/components/ui/button';\nimport { GlassCard } from '@/components/ui/glass-card';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { CreditCard, Banknote, ArrowLeft, Check, Loader2 } from 'lucide-react';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\n\n// Load Stripe\nif (!import.meta.env.VITE_STRIPE_PUBLIC_KEY) {\n  throw new Error('Missing required Stripe key: VITE_STRIPE_PUBLIC_KEY');\n}\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY);\n\ninterface BookingDetails {\n  id: string;\n  service: {\n    name: string;\n    price: string;\n    duration: number;\n  };\n  slot: {\n    date: string;\n    startTime: string;\n    endTime: string;\n  };\n  vehicleModel: string;\n  vehicleBrand: string;\n}\n\nconst CheckoutForm = ({ \n  bookingDetails, \n  paymentMethod, \n  onSuccess \n}: { \n  bookingDetails: BookingDetails;\n  paymentMethod: string;\n  onSuccess: () => void;\n}) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (paymentMethod === 'cash') {\n      // Handle cash payment\n      setIsProcessing(true);\n      try {\n        await apiRequest('POST', '/api/create-payment-intent', {\n          amount: bookingDetails.service.price,\n          paymentMethod: 'cash',\n          bookingId: bookingDetails.id,\n        });\n        \n        toast({\n          title: \"Booking Confirmed!\",\n          description: \"Your cash payment booking has been confirmed. Please bring exact change on the day of service.\",\n        });\n        onSuccess();\n      } catch (error) {\n        toast({\n          title: \"Booking Failed\",\n          description: \"Failed to confirm cash booking. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setIsProcessing(false);\n      }\n      return;\n    }\n\n    // Handle card payment\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    try {\n      const { error } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/checkout/success?booking_id=${bookingDetails.id}`,\n        },\n      });\n\n      if (error) {\n        toast({\n          title: \"Payment Failed\",\n          description: error.message || \"Please try again with a different payment method.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Payment Error\",\n        description: \"An unexpected error occurred. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\">\n      {paymentMethod === 'card' && (\n        <div className=\"space-y-4\">\n          <h3 className=\"text-lg font-semibold\">Payment Details</h3>\n          <PaymentElement />\n        </div>\n      )}\n\n      <Button \n        type=\"submit\" \n        className=\"w-full\" \n        disabled={isProcessing || (paymentMethod === 'card' && (!stripe || !elements))}\n        data-testid=\"button-confirm-payment\"\n      >\n        {isProcessing ? (\n          <>\n            <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n            Processing...\n          </>\n        ) : (\n          <>\n            {paymentMethod === 'cash' ? (\n              <>\n                <Banknote className=\"w-4 h-4 mr-2\" />\n                Confirm Cash Booking\n              </>\n            ) : (\n              <>\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Pay R{bookingDetails.service.price}\n              </>\n            )}\n          </>\n        )}\n      </Button>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const [location] = useLocation();\n  const [, navigate] = useRouter();\n  const { toast } = useToast();\n  const [paymentMethod, setPaymentMethod] = useState<'cash' | 'card'>('cash');\n  const [clientSecret, setClientSecret] = useState<string>('');\n  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Get booking ID from URL params\n  const urlParams = new URLSearchParams(location.split('?')[1] || '');\n  const bookingId = urlParams.get('booking_id');\n\n  useEffect(() => {\n    if (!bookingId) {\n      toast({\n        title: \"Invalid Booking\",\n        description: \"No booking ID provided. Redirecting to booking page.\",\n        variant: \"destructive\",\n      });\n      router('/booking');\n      return;\n    }\n\n    // Load booking details\n    const loadBookingDetails = async () => {\n      try {\n        // In a real app, you'd fetch the booking details\n        // For now, we'll use localStorage or mock data\n        const mockBooking: BookingDetails = {\n          id: bookingId,\n          service: {\n            name: \"Premium Wash & Wax\",\n            price: \"299.99\",\n            duration: 90\n          },\n          slot: {\n            date: \"2024-01-15\",\n            startTime: \"10:00\",\n            endTime: \"11:30\"\n          },\n          vehicleModel: \"Camry\",\n          vehicleBrand: \"Toyota\"\n        };\n        setBookingDetails(mockBooking);\n        setIsLoading(false);\n      } catch (error) {\n        toast({\n          title: \"Error\",\n          description: \"Failed to load booking details\",\n          variant: \"destructive\",\n        });\n        navigate('/booking');\n      }\n    };\n\n    loadBookingDetails();\n  }, [bookingId, router, toast]);\n\n  useEffect(() => {\n    if (bookingDetails && paymentMethod === 'card') {\n      // Create payment intent for card payments\n      const createPaymentIntent = async () => {\n        try {\n          const response = await apiRequest('POST', '/api/create-payment-intent', {\n            amount: bookingDetails.service.price,\n            paymentMethod: 'card',\n            bookingId: bookingDetails.id,\n          });\n          const data = await response.json();\n          setClientSecret(data.clientSecret);\n        } catch (error) {\n          toast({\n            title: \"Payment Setup Failed\",\n            description: \"Unable to initialize payment. Please try again.\",\n            variant: \"destructive\",\n          });\n        }\n      };\n\n      createPaymentIntent();\n    }\n  }, [bookingDetails, paymentMethod, toast]);\n\n  const handleSuccess = () => {\n    navigate('/checkout/success?booking_id=' + bookingId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center\">\n              <GlassCard className=\"p-12 max-w-md mx-auto\">\n                <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                <div className=\"text-lg font-semibold\">Loading booking details...</div>\n              </GlassCard>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!bookingDetails) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center\">\n              <GlassCard className=\"p-12 max-w-md mx-auto\">\n                <div className=\"text-lg font-semibold text-red-400 mb-4\">Booking Not Found</div>\n                <Button onClick={() => router('/booking')}>\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Booking\n                </Button>\n              </GlassCard>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            \n            {/* Header */}\n            <div className=\"text-center mb-8\">\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n                <span className=\"text-gradient\">Complete Your Booking</span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Choose your payment method and confirm your car wash service\n              </p>\n            </div>\n\n            <div className=\"grid lg:grid-cols-2 gap-8\">\n              \n              {/* Booking Summary */}\n              <GlassCard className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-6\">Booking Summary</h2>\n                \n                <div className=\"space-y-6\">\n                  {/* Service Details */}\n                  <div className=\"border-b border-border pb-4\">\n                    <h3 className=\"font-semibold text-lg mb-2\">{bookingDetails.service.name}</h3>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Duration: {bookingDetails.service.duration} minutes</span>\n                      <span className=\"text-2xl font-bold text-gradient\">R{bookingDetails.service.price}</span>\n                    </div>\n                  </div>\n\n                  {/* Date & Time */}\n                  <div className=\"border-b border-border pb-4\">\n                    <h4 className=\"font-semibold mb-2\">Appointment</h4>\n                    <div className=\"text-muted-foreground\">\n                      <div>{new Date(bookingDetails.slot.date).toLocaleDateString('en-ZA', {\n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                      })}</div>\n                      <div>{bookingDetails.slot.startTime} - {bookingDetails.slot.endTime}</div>\n                    </div>\n                  </div>\n\n                  {/* Vehicle Details */}\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">Vehicle</h4>\n                    <div className=\"text-muted-foreground\">\n                      {bookingDetails.vehicleBrand} {bookingDetails.vehicleModel}\n                    </div>\n                  </div>\n\n                  {/* Total */}\n                  <div className=\"border-t border-border pt-4\">\n                    <div className=\"flex items-center justify-between text-xl font-bold\">\n                      <span>Total</span>\n                      <span className=\"text-gradient\">R{bookingDetails.service.price}</span>\n                    </div>\n                  </div>\n                </div>\n              </GlassCard>\n\n              {/* Payment Section */}\n              <GlassCard className=\"p-8\">\n                <h2 className=\"text-2xl font-bold mb-6\">Payment Method</h2>\n                \n                {/* Payment Method Selection */}\n                <RadioGroup \n                  value={paymentMethod} \n                  onValueChange={(value: 'cash' | 'card') => setPaymentMethod(value)}\n                  className=\"mb-8\"\n                >\n                  <div className=\"space-y-4\">\n                    {/* Cash Payment Option */}\n                    <div className=\"flex items-center space-x-3 p-4 rounded-lg border border-border hover:bg-white/5 transition-colors\">\n                      <RadioGroupItem value=\"cash\" id=\"cash\" data-testid=\"radio-payment-cash\" />\n                      <Label htmlFor=\"cash\" className=\"flex-1 cursor-pointer\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Banknote className=\"w-5 h-5\" />\n                            <div>\n                              <div className=\"font-semibold\">Cash Payment</div>\n                              <div className=\"text-sm text-muted-foreground\">Pay on-site with South African Rand</div>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-green-500/20 text-green-400\">Popular</Badge>\n                        </div>\n                      </Label>\n                    </div>\n\n                    {/* Card Payment Option */}\n                    <div className=\"flex items-center space-x-3 p-4 rounded-lg border border-border hover:bg-white/5 transition-colors\">\n                      <RadioGroupItem value=\"card\" id=\"card\" data-testid=\"radio-payment-card\" />\n                      <Label htmlFor=\"card\" className=\"flex-1 cursor-pointer\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-3\">\n                            <CreditCard className=\"w-5 h-5\" />\n                            <div>\n                              <div className=\"font-semibold\">Card Payment</div>\n                              <div className=\"text-sm text-muted-foreground\">Visa, MasterCard - Secure online payment</div>\n                            </div>\n                          </div>\n                          <Badge className=\"bg-blue-500/20 text-blue-400\">Secure</Badge>\n                        </div>\n                      </Label>\n                    </div>\n                  </div>\n                </RadioGroup>\n\n                {/* Payment Form */}\n                {paymentMethod === 'card' && clientSecret ? (\n                  <Elements \n                    stripe={stripePromise} \n                    options={{ \n                      clientSecret,\n                      appearance: {\n                        theme: 'night',\n                        variables: {\n                          colorPrimary: '#00d4ff',\n                          colorBackground: 'rgba(255, 255, 255, 0.1)',\n                          colorText: '#ffffff',\n                          colorDanger: '#ff6b6b',\n                          borderRadius: '12px',\n                        },\n                      },\n                    }}\n                  >\n                    <CheckoutForm \n                      bookingDetails={bookingDetails} \n                      paymentMethod={paymentMethod}\n                      onSuccess={handleSuccess}\n                    />\n                  </Elements>\n                ) : paymentMethod === 'cash' ? (\n                  <CheckoutForm \n                    bookingDetails={bookingDetails} \n                    paymentMethod={paymentMethod}\n                    onSuccess={handleSuccess}\n                  />\n                ) : (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n                    <p className=\"text-muted-foreground\">Setting up secure payment...</p>\n                  </div>\n                )}\n\n                {/* Back Button */}\n                <Button \n                  variant=\"ghost\" \n                  onClick={() => router('/booking')}\n                  className=\"w-full mt-4\"\n                  data-testid=\"button-back-to-booking\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to Booking\n                </Button>\n              </GlassCard>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15903},"client/src/pages/comparison.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Footer from \"@/components/layout/Footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Check, X, Clock, DollarSign } from \"lucide-react\";\n\nexport default function Comparison() {\n  const { data: services, isLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const servicesByCategory = services?.reduce((acc: any, service: any) => {\n    if (!acc[service.category]) {\n      acc[service.category] = [];\n    }\n    acc[service.category].push(service);\n    return acc;\n  }, {});\n\n  const getServiceByCategory = (category: string) => {\n    return servicesByCategory?.[category]?.[0] || null;\n  };\n\n  const expressService = getServiceByCategory('basic');\n  const premiumService = getServiceByCategory('premium'); \n  const detailingService = getServiceByCategory('detailing');\n\n  const comparisonServices = [\n    {\n      name: \"Express Wash\",\n      price: expressService?.price || \"15\",\n      duration: expressService?.duration || 15,\n      service: expressService,\n      gradient: \"from-green-500 to-primary\",\n      popular: false\n    },\n    {\n      name: \"Premium Wash\", \n      price: premiumService?.price || \"29\",\n      duration: premiumService?.duration || 45,\n      service: premiumService,\n      gradient: \"from-primary to-accent\",\n      popular: true\n    },\n    {\n      name: \"Complete Detailing\",\n      price: detailingService?.price || \"99\", \n      duration: detailingService?.duration || 180,\n      service: detailingService,\n      gradient: \"from-accent to-secondary\",\n      popular: false\n    }\n  ];\n\n  const features = [\n    { name: \"Exterior Wash\", express: true, premium: true, detailing: true },\n    { name: \"Interior Cleaning\", express: false, premium: false, detailing: true },\n    { name: \"Wax Protection\", express: false, premium: true, detailing: true },\n    { name: \"Tire Shine\", express: true, premium: true, detailing: true },\n    { name: \"Dashboard Cleaning\", express: false, premium: false, detailing: true },\n    { name: \"Leather Conditioning\", express: false, premium: false, detailing: true },\n    { name: \"Ceramic Coating\", express: false, premium: false, detailing: true },\n    { name: \"Engine Bay Cleaning\", express: false, premium: false, detailing: true },\n    { name: \"Fabric Protection\", express: false, premium: false, detailing: true },\n    { name: \"Window Treatment\", express: true, premium: true, detailing: true },\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen\">\n        <Navigation />\n        <div className=\"pt-24 pb-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-16\">\n              <div className=\"h-12 bg-muted rounded w-64 mx-auto mb-6 animate-pulse\"></div>\n              <div className=\"h-6 bg-muted rounded w-96 mx-auto animate-pulse\"></div>\n            </div>\n            <GlassCard className=\"p-8 animate-pulse\">\n              <div className=\"h-96 bg-muted rounded\"></div>\n            </GlassCard>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Header Section */}\n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"text-gradient\">Service Comparison</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Compare our services to find the perfect car wash package for your needs\n            </p>\n          </div>\n\n          {/* Mobile Comparison Cards */}\n          <div className=\"md:hidden space-y-6 mb-12\">\n            {comparisonServices.map((service, index) => (\n              <GlassCard key={index} className=\"p-6 relative\">\n                {service.popular && (\n                  <div className=\"absolute -top-3 left-1/2 transform -translate-x-1/2\">\n                    <div className=\"bg-gradient-to-r from-primary to-accent text-white px-4 py-1 rounded-full text-sm font-semibold\">\n                      Most Popular\n                    </div>\n                  </div>\n                )}\n                \n                <div className=\"text-center mb-6\">\n                  <h3 className=\"text-2xl font-bold mb-2\">{service.name}</h3>\n                  <div className=\"flex items-center justify-center space-x-4 mb-4\">\n                    <div className=\"flex items-center space-x-1\">\n                      <DollarSign className=\"w-6 h-6 text-primary\" />\n                      <span className=\"text-3xl font-bold text-gradient\">${service.price}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Clock className=\"w-5 h-5 text-muted-foreground\" />\n                      <span className=\"text-muted-foreground\">{service.duration} min</span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"space-y-3 mb-6\">\n                  {features.map((feature) => {\n                    const hasFeature = feature[service.name.toLowerCase().split(' ')[0] as keyof typeof feature];\n                    return (\n                      <div key={feature.name} className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">{feature.name}</span>\n                        {hasFeature ? (\n                          <Check className=\"w-5 h-5 text-green-400\" />\n                        ) : (\n                          <X className=\"w-5 h-5 text-red-400\" />\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n\n                <Button \n                  className={`w-full ripple-effect bg-gradient-to-r ${service.gradient} text-primary-foreground`}\n                  data-testid={`mobile-select-${service.name.toLowerCase().replace(' ', '-')}`}\n                >\n                  Select {service.name}\n                </Button>\n              </GlassCard>\n            ))}\n          </div>\n\n          {/* Desktop Comparison Table */}\n          <div className=\"hidden md:block\">\n            <GlassCard className=\"overflow-hidden\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"bg-gradient-to-r from-primary/20 to-accent/20\">\n                      <th className=\"text-left p-6 font-bold text-lg\">Service Features</th>\n                      {comparisonServices.map((service, index) => (\n                        <th key={index} className=\"text-center p-6 font-bold text-lg relative\">\n                          {service.popular && (\n                            <div className=\"absolute -top-2 left-1/2 transform -translate-x-1/2\">\n                              <div className=\"bg-gradient-to-r from-primary to-accent text-white px-3 py-1 rounded-full text-xs font-semibold\">\n                                Most Popular\n                              </div>\n                            </div>\n                          )}\n                          <div className=\"mt-2\">\n                            {service.name}\n                            <br />\n                            <span className=\"text-sm font-normal text-muted-foreground\">\n                              ${service.price}\n                            </span>\n                          </div>\n                        </th>\n                      ))}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr className=\"border-b border-border hover:bg-white/5 transition-colors duration-300\">\n                      <td className=\"p-6 font-medium\">Duration</td>\n                      {comparisonServices.map((service, index) => (\n                        <td key={index} className=\"text-center p-6 font-semibold\" data-testid={`duration-${service.name.toLowerCase().replace(' ', '-')}`}>\n                          {service.duration} min\n                        </td>\n                      ))}\n                    </tr>\n                    {features.map((feature) => (\n                      <tr key={feature.name} className=\"border-b border-border hover:bg-white/5 transition-colors duration-300\">\n                        <td className=\"p-6 font-medium\">{feature.name}</td>\n                        <td className=\"text-center p-6\">\n                          {feature.express ? (\n                            <Check className=\"w-6 h-6 text-green-400 mx-auto\" data-testid={`express-${feature.name.toLowerCase().replace(' ', '-')}`} />\n                          ) : (\n                            <X className=\"w-6 h-6 text-red-400 mx-auto\" />\n                          )}\n                        </td>\n                        <td className=\"text-center p-6\">\n                          {feature.premium ? (\n                            <Check className=\"w-6 h-6 text-green-400 mx-auto\" data-testid={`premium-${feature.name.toLowerCase().replace(' ', '-')}`} />\n                          ) : (\n                            <X className=\"w-6 h-6 text-red-400 mx-auto\" />\n                          )}\n                        </td>\n                        <td className=\"text-center p-6\">\n                          {feature.detailing ? (\n                            <Check className=\"w-6 h-6 text-green-400 mx-auto\" data-testid={`detailing-${feature.name.toLowerCase().replace(' ', '-')}`} />\n                          ) : (\n                            <X className=\"w-6 h-6 text-red-400 mx-auto\" />\n                          )}\n                        </td>\n                      </tr>\n                    ))}\n                    <tr>\n                      <td className=\"p-6\"></td>\n                      {comparisonServices.map((service, index) => (\n                        <td key={index} className=\"text-center p-6\">\n                          <Button \n                            className={`ripple-effect bg-gradient-to-r ${service.gradient} text-primary-foreground px-6 py-2 rounded-lg font-semibold hover:shadow-lg transition-all duration-300`}\n                            data-testid={`select-${service.name.toLowerCase().replace(' ', '-')}`}\n                          >\n                            Select\n                          </Button>\n                        </td>\n                      ))}\n                    </tr>\n                  </tbody>\n                </table>\n              </div>\n            </GlassCard>\n          </div>\n        </div>\n      </section>\n\n      {/* Value Proposition */}\n      <section className=\"py-24 bg-background/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">\n              <span className=\"text-gradient\">Why Choose Our Services?</span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Professional care with premium quality and exceptional results\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <GlassCard className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-primary rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <Clock className=\"text-2xl text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Time Efficient</h3>\n              <p className=\"text-muted-foreground\">\n                Quick turnaround times without compromising on quality. Express wash in just 15 minutes.\n              </p>\n            </GlassCard>\n\n            <GlassCard className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <DollarSign className=\"text-2xl text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Great Value</h3>\n              <p className=\"text-muted-foreground\">\n                Competitive pricing with transparent costs. No hidden fees, just quality service.\n              </p>\n            </GlassCard>\n\n            <GlassCard className=\"p-8 text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-secondary rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <Check className=\"text-2xl text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Quality Guarantee</h3>\n              <p className=\"text-muted-foreground\">\n                100% satisfaction guarantee. If you're not happy, we'll make it right.\n              </p>\n            </GlassCard>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13009},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Footer from \"@/components/layout/Footer\";\nimport ServiceCard from \"@/components/ServiceCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Calendar, Star, TrendingUp, Clock } from \"lucide-react\";\n\nexport default function Home() {\n  const { user } = useAuth();\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: userBookings, isLoading: bookingsLoading } = useQuery({\n    queryKey: [\"/api/bookings\"],\n  });\n\n  const recentBookings = userBookings?.slice(0, 3) || [];\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Welcome Section */}\n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"glass-effect p-8 rounded-3xl mb-8\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h1 className=\"text-3xl md:text-5xl font-bold mb-4\">\n                  Welcome back, <span className=\"text-gradient\">{user?.firstName || user?.email?.split('@')[0] || 'Car Enthusiast'}</span>!\n                </h1>\n                <p className=\"text-xl text-muted-foreground\">\n                  Ready to give your car the premium treatment it deserves?\n                </p>\n              </div>\n              <div className=\"hidden md:block\">\n                <Link href=\"/booking\">\n                  <Button \n                    className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground px-8 py-4 rounded-xl font-semibold text-lg hover:shadow-2xl transition-all duration-300\"\n                    data-testid=\"button-book-now\"\n                  >\n                    Book Now\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n\n          {/* Quick Stats */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-16\">\n            <div className=\"glass-effect p-6 rounded-2xl text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <Calendar className=\"text-white\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gradient\" data-testid=\"stat-user-bookings\">\n                {userBookings?.length || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Bookings</div>\n            </div>\n\n            <div className=\"glass-effect p-6 rounded-2xl text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-secondary to-primary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <Star className=\"text-white\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gradient\">4.9</div>\n              <div className=\"text-sm text-muted-foreground\">Your Avg Rating</div>\n            </div>\n\n            <div className=\"glass-effect p-6 rounded-2xl text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-secondary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <TrendingUp className=\"text-white\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gradient\">12</div>\n              <div className=\"text-sm text-muted-foreground\">Available Slots</div>\n            </div>\n\n            <div className=\"glass-effect p-6 rounded-2xl text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-primary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <Clock className=\"text-white\" />\n              </div>\n              <div className=\"text-2xl font-bold text-gradient\">30min</div>\n              <div className=\"text-sm text-muted-foreground\">Avg Service Time</div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Recent Bookings */}\n      {recentBookings.length > 0 && (\n        <section className=\"py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex items-center justify-between mb-8\">\n              <h2 className=\"text-3xl md:text-4xl font-bold\">\n                <span className=\"text-gradient\">Recent Bookings</span>\n              </h2>\n              <Link href=\"/booking\">\n                <Button \n                  variant=\"outline\"\n                  className=\"glass-effect border-border hover:bg-white/20\"\n                  data-testid=\"button-view-all-bookings\"\n                >\n                  View All\n                </Button>\n              </Link>\n            </div>\n\n            <div className=\"space-y-4\">\n              {bookingsLoading ? (\n                Array.from({ length: 3 }).map((_, i) => (\n                  <div key={i} className=\"glass-effect p-6 rounded-2xl animate-pulse\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-32\"></div>\n                        <div className=\"h-3 bg-muted rounded w-24\"></div>\n                      </div>\n                      <div className=\"h-8 bg-muted rounded w-20\"></div>\n                    </div>\n                  </div>\n                ))\n              ) : (\n                recentBookings.map((booking: any) => (\n                  <div key={booking.id} className=\"glass-effect p-6 rounded-2xl hover:bg-white/10 transition-all duration-300\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <h3 className=\"font-semibold text-lg\" data-testid={`booking-service-${booking.id}`}>\n                          {booking.service?.name || 'Service'}\n                        </h3>\n                        <p className=\"text-muted-foreground text-sm\">\n                          {booking.vehicleBrand} {booking.vehicleModel} • {booking.slot?.date}\n                        </p>\n                        <div className=\"flex items-center space-x-2 mt-2\">\n                          <span className={`px-3 py-1 rounded-full text-xs font-medium ${\n                            booking.status === 'completed' ? 'bg-green-500/20 text-green-400' :\n                            booking.status === 'confirmed' ? 'bg-blue-500/20 text-blue-400' :\n                            booking.status === 'in-progress' ? 'bg-yellow-500/20 text-yellow-400' :\n                            'bg-gray-500/20 text-gray-400'\n                          }`}>\n                            {booking.status}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-bold text-gradient\" data-testid={`booking-amount-${booking.id}`}>\n                          ${booking.totalAmount}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {booking.slot?.startTime} - {booking.slot?.endTime}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Popular Services */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <h2 className=\"text-3xl md:text-4xl font-bold\">\n              <span className=\"text-gradient\">Popular Services</span>\n            </h2>\n            <Link href=\"/services\">\n              <Button \n                variant=\"outline\"\n                className=\"glass-effect border-border hover:bg-white/20\"\n                data-testid=\"button-view-all-services\"\n              >\n                View All Services\n              </Button>\n            </Link>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {servicesLoading ? (\n              Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"glass-effect p-8 rounded-3xl animate-pulse\">\n                  <div className=\"space-y-4\">\n                    <div className=\"w-16 h-16 bg-muted rounded-2xl\"></div>\n                    <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  </div>\n                </div>\n              ))\n            ) : (\n              services?.slice(0, 6).map((service: any) => (\n                <ServiceCard key={service.id} service={service} />\n              ))\n            )}\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Actions */}\n      <section className=\"py-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"glass-effect p-12 rounded-3xl text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">\n              What would you like to do today?\n            </h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Link href=\"/booking\">\n                <Button \n                  className=\"w-full ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground py-4 rounded-xl font-semibold text-lg hover:shadow-2xl transition-all duration-300\"\n                  data-testid=\"button-quick-book\"\n                >\n                  Quick Book\n                </Button>\n              </Link>\n              <Link href=\"/services\">\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full glass-effect border-border hover:bg-white/20 py-4 rounded-xl font-semibold text-lg\"\n                  data-testid=\"button-browse-services\"\n                >\n                  Browse Services\n                </Button>\n              </Link>\n              <Link href=\"/comparison\">\n                <Button \n                  variant=\"outline\"\n                  className=\"w-full glass-effect border-border hover:bg-white/20 py-4 rounded-xl font-semibold text-lg\"\n                  data-testid=\"button-compare-packages\"\n                >\n                  Compare Packages\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10625},"client/src/pages/landing.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Footer from \"@/components/layout/Footer\";\nimport { Car, Star, Clock, Shield, Play, ArrowRight } from \"lucide-react\";\n\nexport default function Landing() {\n  const [currentSlide, setCurrentSlide] = useState(0);\n\n  const heroSlides = [\n    {\n      title: \"GENTLE ON YOUR CAR\",\n      subtitle: \"POWERFUL ON CLEAN\",\n      description: \"Experience premium car wash services with eco-friendly products and cutting-edge technology\",\n      image: \"https://images.unsplash.com/photo-1558618666-fcd25c85cd64?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\"\n    },\n    {\n      title: \"PROFESSIONAL DETAILING\",\n      subtitle: \"EXPERT CARE\",\n      description: \"Our certified technicians provide meticulous attention to every detail of your vehicle\",\n      image: \"https://images.unsplash.com/photo-1607860108855-64acf2078ed9?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\"\n    },\n    {\n      title: \"CONVENIENT BOOKING\",\n      subtitle: \"INSTANT SCHEDULING\",\n      description: \"Book your preferred time slot with our easy-to-use online booking system\",\n      image: \"https://images.unsplash.com/photo-1486839230200-c87b5ac82def?ixlib=rb-4.0.3&auto=format&fit=crop&w=1920&h=1080\"\n    }\n  ];\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentSlide((prev) => (prev + 1) % heroSlides.length);\n    }, 5000);\n    return () => clearInterval(timer);\n  }, [heroSlides.length]);\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n        {/* Background Slides */}\n        {heroSlides.map((slide, index) => (\n          <div\n            key={index}\n            className={`absolute inset-0 transition-opacity duration-1000 ${\n              index === currentSlide ? 'opacity-100' : 'opacity-0'\n            }`}\n            style={{\n              backgroundImage: `linear-gradient(rgba(15, 23, 42, 0.7), rgba(30, 58, 138, 0.6)), url('${slide.image}')`,\n              backgroundSize: 'cover',\n              backgroundPosition: 'center',\n            }}\n          />\n        ))}\n        \n        <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-background/50 to-background\"></div>\n        \n        <div className=\"container mx-auto px-4 text-center relative z-10 animate-fade-in\">\n          <div className=\"glass-effect p-12 rounded-3xl max-w-4xl mx-auto\">\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 animate-slide-up\">\n              <span className=\"text-gradient\">{heroSlides[currentSlide].title.split(' ')[0]}</span> {heroSlides[currentSlide].title.split(' ').slice(1).join(' ')}<br/>\n              <span className=\"text-gradient\">{heroSlides[currentSlide].subtitle.split(' ')[0]}</span> {heroSlides[currentSlide].subtitle.split(' ').slice(1).join(' ')}\n            </h1>\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-8 max-w-2xl mx-auto leading-relaxed\">\n              {heroSlides[currentSlide].description}\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/services\">\n                <Button\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground px-8 py-4 rounded-xl font-semibold text-lg hover:shadow-2xl transition-all duration-300 min-w-[200px]\"\n                  data-testid=\"button-explore-services\"\n                >\n                  Explore Services\n                </Button>\n              </Link>\n              <Button\n                variant=\"outline\"\n                className=\"glass-effect text-foreground px-8 py-4 rounded-xl font-semibold text-lg hover:bg-white/20 transition-all duration-300 min-w-[200px]\"\n                data-testid=\"button-watch-demo\"\n              >\n                <Play className=\"mr-2 w-5 h-5\" />\n                Watch Demo\n              </Button>\n            </div>\n            \n            {/* Live Service Availability Indicator */}\n            <div className=\"mt-8 flex items-center justify-center space-x-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-green-400 rounded-full animate-bounce-subtle\"></div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-available-slots\">12 Slots Available Today</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-3 h-3 bg-primary rounded-full animate-glow\"></div>\n                <span className=\"text-sm font-medium\" data-testid=\"text-fast-service\">Fast 30-min Service</span>\n              </div>\n            </div>\n\n            {/* Slide Indicators */}\n            <div className=\"flex justify-center space-x-2 mt-8\">\n              {heroSlides.map((_, index) => (\n                <button\n                  key={index}\n                  onClick={() => setCurrentSlide(index)}\n                  className={`w-3 h-3 rounded-full transition-all duration-300 ${\n                    index === currentSlide \n                      ? 'bg-primary' \n                      : 'bg-white/30 hover:bg-white/50'\n                  }`}\n                  data-testid={`slide-indicator-${index}`}\n                />\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Floating animated elements */}\n        <div className=\"absolute top-20 left-10 w-20 h-20 bg-primary/20 rounded-full animate-float blur-sm\"></div>\n        <div className=\"absolute bottom-20 right-10 w-32 h-32 bg-accent/20 rounded-full animate-float blur-sm\" style={{ animationDelay: '-2s' }}></div>\n        <div className=\"absolute top-1/2 left-1/4 w-16 h-16 bg-secondary/20 rounded-full animate-float blur-sm\" style={{ animationDelay: '-4s' }}></div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-24 relative\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"text-gradient\">Why Choose AquaShine?</span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Professional car care with premium quality and exceptional service\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"glass-effect p-8 rounded-3xl floating-card text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <Shield className=\"text-2xl text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Premium Quality</h3>\n              <p className=\"text-muted-foreground\">\n                We use only the finest eco-friendly products and state-of-the-art equipment for superior results.\n              </p>\n            </div>\n\n            <div className=\"glass-effect p-8 rounded-3xl floating-card text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-secondary to-primary rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <Clock className=\"text-2xl text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Fast & Efficient</h3>\n              <p className=\"text-muted-foreground\">\n                Quick turnaround times without compromising on quality. Most services completed in under an hour.\n              </p>\n            </div>\n\n            <div className=\"glass-effect p-8 rounded-3xl floating-card text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-secondary rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <Star className=\"text-2xl text-white\" />\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Expert Service</h3>\n              <p className=\"text-muted-foreground\">\n                Our certified technicians are trained to handle all vehicle types with meticulous attention to detail.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-24 relative\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"glass-effect p-12 rounded-3xl\">\n            <div className=\"grid md:grid-cols-4 gap-8 text-center\">\n              <div>\n                <div className=\"text-4xl md:text-6xl font-bold text-gradient mb-2\" data-testid=\"stat-customers\">5,000+</div>\n                <div className=\"text-muted-foreground\">Happy Customers</div>\n              </div>\n              <div>\n                <div className=\"text-4xl md:text-6xl font-bold text-gradient mb-2\" data-testid=\"stat-services\">15,000+</div>\n                <div className=\"text-muted-foreground\">Services Completed</div>\n              </div>\n              <div>\n                <div className=\"text-4xl md:text-6xl font-bold text-gradient mb-2\" data-testid=\"stat-rating\">4.9</div>\n                <div className=\"text-muted-foreground\">Average Rating</div>\n              </div>\n              <div>\n                <div className=\"text-4xl md:text-6xl font-bold text-gradient mb-2\" data-testid=\"stat-experience\">10+</div>\n                <div className=\"text-muted-foreground\">Years Experience</div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 relative\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"glass-effect p-12 rounded-3xl max-w-4xl mx-auto\">\n            <h2 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              Ready to Give Your Car the <span className=\"text-gradient\">Premium Treatment</span>?\n            </h2>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\">\n              Join thousands of satisfied customers who trust AquaShine for their car care needs.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/auth/login\">\n                <Button\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground px-8 py-4 rounded-xl font-semibold text-lg hover:shadow-2xl transition-all duration-300\"\n                  data-testid=\"button-get-started\"\n                >\n                  Get Started Now\n                  <ArrowRight className=\"ml-2 w-5 h-5\" />\n                </Button>\n              </Link>\n              <Link href=\"/services\">\n                <Button\n                  variant=\"outline\"\n                  className=\"glass-effect text-foreground px-8 py-4 rounded-xl font-semibold text-lg hover:bg-white/20 transition-all duration-300\"\n                  data-testid=\"button-view-services\"\n                >\n                  View Services\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11325},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reviews.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Footer from \"@/components/layout/Footer\";\nimport ReviewCard from \"@/components/ReviewCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Star, TrendingUp, Users, Award } from \"lucide-react\";\n\nexport default function Reviews() {\n  const [selectedService, setSelectedService] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  const { data: reviews, isLoading: reviewsLoading } = useQuery({\n    queryKey: [\"/api/reviews\", selectedService !== \"all\" ? selectedService : undefined],\n  });\n\n  const { data: services } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const sortedReviews = reviews?.sort((a: any, b: any) => {\n    switch (sortBy) {\n      case \"oldest\":\n        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n      case \"rating-high\":\n        return b.rating - a.rating;\n      case \"rating-low\":\n        return a.rating - b.rating;\n      default: // newest\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }\n  });\n\n  const averageRating = reviews?.length \n    ? (reviews.reduce((sum: number, review: any) => sum + review.rating, 0) / reviews.length).toFixed(1)\n    : \"0.0\";\n\n  const ratingDistribution = Array.from({ length: 5 }, (_, i) => {\n    const rating = 5 - i;\n    const count = reviews?.filter((review: any) => review.rating === rating).length || 0;\n    const percentage = reviews?.length ? (count / reviews.length) * 100 : 0;\n    return { rating, count, percentage };\n  });\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Header Section */}\n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"text-gradient\">Customer Reviews</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              See what our satisfied customers have to say about our premium car wash services\n            </p>\n          </div>\n\n          {/* Stats Overview */}\n          <div className=\"grid md:grid-cols-4 gap-6 mb-12\">\n            <GlassCard className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <Star className=\"text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gradient mb-2\" data-testid=\"average-rating\">\n                {averageRating}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Average Rating</div>\n            </GlassCard>\n\n            <GlassCard className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-secondary to-primary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <Users className=\"text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gradient mb-2\" data-testid=\"total-reviews\">\n                {reviews?.length || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Total Reviews</div>\n            </GlassCard>\n\n            <GlassCard className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-secondary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <TrendingUp className=\"text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gradient mb-2\" data-testid=\"satisfaction-rate\">\n                98%\n              </div>\n              <div className=\"text-sm text-muted-foreground\">Satisfaction Rate</div>\n            </GlassCard>\n\n            <GlassCard className=\"p-6 text-center\">\n              <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-primary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n                <Award className=\"text-white\" />\n              </div>\n              <div className=\"text-3xl font-bold text-gradient mb-2\" data-testid=\"five-star-reviews\">\n                {ratingDistribution[0]?.count || 0}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">5-Star Reviews</div>\n            </GlassCard>\n          </div>\n\n          {/* Rating Distribution */}\n          <GlassCard className=\"p-8 mb-12\">\n            <h3 className=\"text-2xl font-bold mb-6\">Rating Distribution</h3>\n            <div className=\"space-y-4\">\n              {ratingDistribution.map(({ rating, count, percentage }) => (\n                <div key={rating} className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2 w-20\">\n                    <span className=\"font-medium\">{rating}</span>\n                    <Star className=\"w-4 h-4 text-yellow-400 fill-current\" />\n                  </div>\n                  <div className=\"flex-1 bg-muted rounded-full h-3 overflow-hidden\">\n                    <div \n                      className=\"h-full bg-gradient-to-r from-primary to-accent transition-all duration-1000\"\n                      style={{ width: `${percentage}%` }}\n                    ></div>\n                  </div>\n                  <div className=\"w-16 text-right\">\n                    <span className=\"text-sm text-muted-foreground\" data-testid={`rating-${rating}-count`}>\n                      {count}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </GlassCard>\n\n          {/* Filters */}\n          <GlassCard className=\"p-6 mb-12\">\n            <div className=\"flex flex-col sm:flex-row gap-4 items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"font-medium\">Filter by Service:</span>\n                <Select value={selectedService} onValueChange={setSelectedService}>\n                  <SelectTrigger className=\"glass-effect border-border w-48\" data-testid=\"select-service-filter\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Services</SelectItem>\n                    {services?.map((service: any) => (\n                      <SelectItem key={service.id} value={service.id}>\n                        {service.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"font-medium\">Sort by:</span>\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"glass-effect border-border w-40\" data-testid=\"select-sort-reviews\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"newest\">Newest</SelectItem>\n                    <SelectItem value=\"oldest\">Oldest</SelectItem>\n                    <SelectItem value=\"rating-high\">Highest Rating</SelectItem>\n                    <SelectItem value=\"rating-low\">Lowest Rating</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"mt-4 text-sm text-muted-foreground\" data-testid=\"filtered-reviews-count\">\n              Showing {sortedReviews?.length || 0} reviews\n            </div>\n          </GlassCard>\n        </div>\n      </section>\n\n      {/* Reviews Grid */}\n      <section className=\"pb-24\">\n        <div className=\"container mx-auto px-4\">\n          {reviewsLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <GlassCard key={i} className=\"p-8 animate-pulse\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex space-x-1\">\n                      {Array.from({ length: 5 }).map((_, j) => (\n                        <div key={j} className=\"w-4 h-4 bg-muted rounded\"></div>\n                      ))}\n                    </div>\n                    <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-1/2\"></div>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-24\"></div>\n                        <div className=\"h-3 bg-muted rounded w-20\"></div>\n                      </div>\n                    </div>\n                  </div>\n                </GlassCard>\n              ))}\n            </div>\n          ) : sortedReviews?.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <GlassCard className=\"p-12 max-w-md mx-auto\">\n                <Star className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No reviews found</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  {selectedService !== \"all\" \n                    ? \"No reviews available for the selected service\"\n                    : \"Be the first to leave a review\"\n                  }\n                </p>\n                {selectedService !== \"all\" && (\n                  <Button\n                    onClick={() => setSelectedService(\"all\")}\n                    className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                    data-testid=\"button-show-all-reviews\"\n                  >\n                    Show All Reviews\n                  </Button>\n                )}\n              </GlassCard>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {sortedReviews?.map((review: any) => (\n                <ReviewCard key={review.id} review={review} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10582},"client/src/pages/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Navigation from \"@/components/layout/Navigation\";\nimport Footer from \"@/components/layout/Footer\";\nimport ServiceCard from \"@/components/ServiceCard\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Search, Filter, SlidersHorizontal } from \"lucide-react\";\n\nexport default function Services() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n\n  const { data: services, isLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n  });\n\n  const categories = [\n    { id: \"all\", label: \"All Services\" },\n    { id: \"basic\", label: \"Basic Wash\" },\n    { id: \"premium\", label: \"Premium\" },\n    { id: \"detailing\", label: \"Detailing\" },\n  ];\n\n  const sortOptions = [\n    { id: \"name\", label: \"Name\" },\n    { id: \"price\", label: \"Price\" },\n    { id: \"duration\", label: \"Duration\" },\n    { id: \"category\", label: \"Category\" },\n  ];\n\n  const filteredServices = services?.filter((service: any) => {\n    const matchesSearch = service.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         service.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === \"all\" || service.category === selectedCategory;\n    return matchesSearch && matchesCategory;\n  });\n\n  const sortedServices = filteredServices?.sort((a: any, b: any) => {\n    switch (sortBy) {\n      case \"price\":\n        return parseFloat(a.price) - parseFloat(b.price);\n      case \"duration\":\n        return a.duration - b.duration;\n      case \"category\":\n        return a.category.localeCompare(b.category);\n      default:\n        return a.name.localeCompare(b.name);\n    }\n  });\n\n  return (\n    <div className=\"min-h-screen\">\n      <Navigation />\n      \n      {/* Header Section */}\n      <section className=\"pt-24 pb-16\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"text-4xl md:text-6xl font-bold mb-6\">\n              <span className=\"text-gradient\">Premium Services</span>\n            </h1>\n            <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n              Experience professional car care with our comprehensive range of services\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"glass-effect p-6 rounded-3xl mb-12\">\n            <div className=\"flex flex-col lg:flex-row gap-6\">\n              {/* Search */}\n              <div className=\"flex-1 relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n                <Input\n                  placeholder=\"Search services...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 glass-effect border-border\"\n                  data-testid=\"input-search-services\"\n                />\n              </div>\n\n              {/* Category Filter */}\n              <div className=\"flex space-x-2\">\n                {categories.map((category) => (\n                  <Button\n                    key={category.id}\n                    variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n                    onClick={() => setSelectedCategory(category.id)}\n                    className={`${\n                      selectedCategory === category.id\n                        ? \"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                        : \"glass-effect border-border hover:bg-white/10\"\n                    } transition-all duration-300`}\n                    data-testid={`filter-category-${category.id}`}\n                  >\n                    {category.label}\n                  </Button>\n                ))}\n              </div>\n\n              {/* Sort Options */}\n              <div className=\"flex items-center space-x-2\">\n                <SlidersHorizontal className=\"text-muted-foreground w-5 h-5\" />\n                <select\n                  value={sortBy}\n                  onChange={(e) => setSortBy(e.target.value)}\n                  className=\"glass-effect border border-border rounded-lg px-3 py-2 text-foreground bg-transparent\"\n                  data-testid=\"select-sort-by\"\n                >\n                  {sortOptions.map((option) => (\n                    <option key={option.id} value={option.id} className=\"bg-background\">\n                      Sort by {option.label}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Results Count */}\n            <div className=\"mt-4 text-sm text-muted-foreground\" data-testid=\"services-count\">\n              {filteredServices?.length || 0} services found\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Services Grid */}\n      <section className=\"pb-24\">\n        <div className=\"container mx-auto px-4\">\n          {isLoading ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <div key={i} className=\"glass-effect p-8 rounded-3xl animate-pulse\">\n                  <div className=\"space-y-4\">\n                    <div className=\"w-16 h-16 bg-muted rounded-2xl\"></div>\n                    <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                    <div className=\"h-4 bg-muted rounded w-full\"></div>\n                    <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                    <div className=\"flex justify-between\">\n                      <div className=\"h-8 bg-muted rounded w-20\"></div>\n                      <div className=\"h-8 bg-muted rounded w-24\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : sortedServices?.length === 0 ? (\n            <div className=\"text-center py-16\">\n              <div className=\"glass-effect p-12 rounded-3xl max-w-md mx-auto\">\n                <Filter className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No services found</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Try adjusting your search criteria or filters\n                </p>\n                <Button\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setSelectedCategory(\"all\");\n                  }}\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {sortedServices?.map((service: any) => (\n                <ServiceCard key={service.id} service={service} />\n              ))}\n            </div>\n          )}\n        </div>\n      </section>\n\n      {/* Service Categories Info */}\n      <section className=\"py-24 bg-background/50\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">\n              <span className=\"text-gradient\">Service Categories</span>\n            </h2>\n            <p className=\"text-xl text-muted-foreground\">\n              Choose the perfect service level for your vehicle's needs\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"glass-effect p-8 rounded-3xl text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-green-500 to-primary rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <span className=\"text-2xl text-white font-bold\">B</span>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Basic Wash</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Quick and affordable exterior cleaning perfect for regular maintenance\n              </p>\n              <ul className=\"text-sm text-muted-foreground space-y-2\">\n                <li>• Exterior wash & rinse</li>\n                <li>• Tire cleaning</li>\n                <li>• Basic drying</li>\n                <li>• 15-30 minutes</li>\n              </ul>\n            </div>\n\n            <div className=\"glass-effect p-8 rounded-3xl text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <span className=\"text-2xl text-white font-bold\">P</span>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Premium</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Comprehensive cleaning with protective treatments for enhanced shine\n              </p>\n              <ul className=\"text-sm text-muted-foreground space-y-2\">\n                <li>• Everything in Basic</li>\n                <li>• Wax protection</li>\n                <li>• Interior vacuum</li>\n                <li>• 45-90 minutes</li>\n              </ul>\n            </div>\n\n            <div className=\"glass-effect p-8 rounded-3xl text-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-secondary rounded-2xl flex items-center justify-center mb-6 mx-auto\">\n                <span className=\"text-2xl text-white font-bold\">D</span>\n              </div>\n              <h3 className=\"text-2xl font-bold mb-4\">Detailing</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                Professional detailing service for the ultimate car care experience\n              </p>\n              <ul className=\"text-sm text-muted-foreground space-y-2\">\n                <li>• Full interior & exterior</li>\n                <li>• Ceramic coating</li>\n                <li>• Leather conditioning</li>\n                <li>• 2-4 hours</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":10415},"client/src/components/admin/Sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Car, BarChart3, Calendar, Settings, Users, Star, LogOut } from \"lucide-react\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { Button } from \"@/components/ui/button\";\n\nconst navigationItems = [\n  { href: \"/admin/dashboard\", label: \"Dashboard\", icon: BarChart3 },\n  { href: \"/admin/bookings\", label: \"Bookings\", icon: Calendar },\n  { href: \"/admin/services\", label: \"Services\", icon: Settings },\n  { href: \"/reviews\", label: \"Reviews\", icon: Star },\n  { href: \"/\", label: \"View Site\", icon: Users },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"glass-dark h-full min-h-screen w-64 fixed left-0 top-0 z-40 p-6 space-y-6\">\n      {/* Logo */}\n      <div className=\"flex items-center space-x-3 mb-8\">\n        <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n          <Car className=\"text-white\" />\n        </div>\n        <span className=\"text-xl font-bold text-gradient\">Admin Panel</span>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"space-y-2\">\n        {navigationItems.map((item) => {\n          const isActive = location === item.href || \n            (item.href === \"/admin/dashboard\" && location.startsWith(\"/admin\") && location !== \"/admin/services\" && location !== \"/admin/bookings\");\n          \n          return (\n            <Link key={item.href} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                className={`w-full justify-start space-x-3 p-3 rounded-xl transition-all duration-300 ${\n                  isActive\n                    ? \"bg-gradient-to-r from-primary to-accent text-primary-foreground shadow-lg\"\n                    : \"text-muted-foreground hover:text-foreground hover:bg-white/10\"\n                }`}\n                data-testid={`nav-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n              >\n                <item.icon className=\"w-5 h-5\" />\n                <span className=\"font-medium\">{item.label}</span>\n              </Button>\n            </Link>\n          );\n        })}\n      </nav>\n\n      {/* User Actions */}\n      <div className=\"mt-auto pt-6 border-t border-border space-y-2\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => window.location.href = '/api/logout'}\n          className=\"w-full justify-start space-x-3 p-3 rounded-xl text-muted-foreground hover:text-foreground hover:bg-white/10 transition-all duration-300\"\n          data-testid=\"button-logout\"\n        >\n          <LogOut className=\"w-5 h-5\" />\n          <span className=\"font-medium\">Logout</span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2720},"client/src/components/layout/Footer.tsx":{"content":"import { Car, Phone, Mail, MapPin, Facebook, Twitter, Instagram, Linkedin } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"py-16 relative\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"glass-effect p-12 rounded-3xl\">\n          <div className=\"grid md:grid-cols-3 gap-12\">\n            {/* Contact Info */}\n            <div>\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n                  <Car className=\"text-white text-lg\" />\n                </div>\n                <span className=\"text-2xl font-bold text-gradient\">AquaShine</span>\n              </div>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <Phone className=\"text-primary w-5 h-5\" />\n                  <span data-testid=\"contact-phone\">+1 (555) 123-4567</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"text-primary w-5 h-5\" />\n                  <span data-testid=\"contact-email\">hello@aquashine.com</span>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  <MapPin className=\"text-primary w-5 h-5\" />\n                  <span data-testid=\"contact-address\">123 Clean Street, Wash City</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Hours of Operation */}\n            <div>\n              <h3 className=\"text-xl font-bold mb-6\">Hours of Operation</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span>Monday - Friday</span>\n                  <span className=\"text-primary font-semibold\" data-testid=\"hours-weekday\">8:00 AM - 7:00 PM</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Saturday</span>\n                  <span className=\"text-primary font-semibold\" data-testid=\"hours-saturday\">9:00 AM - 6:00 PM</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Sunday</span>\n                  <span className=\"text-primary font-semibold\" data-testid=\"hours-sunday\">10:00 AM - 5:00 PM</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Newsletter Signup */}\n            <div>\n              <h3 className=\"text-xl font-bold mb-6\">Stay Updated</h3>\n              <p className=\"text-muted-foreground mb-4\">Get exclusive offers and booking reminders</p>\n              <div className=\"space-y-3\">\n                <Input\n                  type=\"email\"\n                  placeholder=\"Enter your email\"\n                  className=\"glass-effect border border-border rounded-xl text-foreground placeholder-muted-foreground focus:ring-2 focus:ring-primary focus:border-transparent\"\n                  data-testid=\"input-newsletter-email\"\n                />\n                <Button \n                  className=\"w-full ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground hover:shadow-lg transition-all duration-300\"\n                  data-testid=\"button-subscribe\"\n                >\n                  Subscribe Now\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"border-t border-border mt-12 pt-8 flex flex-col md:flex-row items-center justify-between\">\n            <div className=\"text-muted-foreground text-sm\" data-testid=\"copyright\">\n              © 2024 AquaShine Car Wash. All rights reserved.\n            </div>\n            <div className=\"flex items-center space-x-6 mt-4 md:mt-0\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-300\"\n                data-testid=\"social-facebook\"\n              >\n                <Facebook className=\"w-5 h-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-300\"\n                data-testid=\"social-twitter\"\n              >\n                <Twitter className=\"w-5 h-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-300\"\n                data-testid=\"social-instagram\"\n              >\n                <Instagram className=\"w-5 h-5\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"text-muted-foreground hover:text-primary transition-colors duration-300\"\n                data-testid=\"social-linkedin\"\n              >\n                <Linkedin className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5250},"client/src/components/layout/Navigation.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Car, Phone, Menu, X } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const { isAuthenticated, user, logout } = useAuth();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\", public: true },\n    { href: \"/services\", label: \"Services\", public: true },\n    { href: \"/reviews\", label: \"Reviews\", public: true },\n    { href: \"/comparison\", label: \"Compare\", public: true },\n    { href: \"/booking\", label: \"Book Now\", public: false },\n  ];\n\n  const adminLinks = [\n    { href: \"/admin/dashboard\", label: \"Dashboard\" },\n    { href: \"/admin/services\", label: \"Services\" },\n    { href: \"/admin/bookings\", label: \"Bookings\" },\n  ];\n\n  return (\n    <nav className=\"fixed top-0 w-full z-50 glass-effect\">\n      <div className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/\" className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n              <Car className=\"text-white text-lg\" />\n            </div>\n            <span className=\"text-2xl font-bold text-gradient\">AquaShine</span>\n          </Link>\n          \n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navLinks.map((link) => {\n              if (!link.public && !isAuthenticated) return null;\n              return (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`font-medium transition-colors duration-300 ${\n                    location === link.href\n                      ? \"text-primary\"\n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                  data-testid={`nav-link-${link.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  {link.label}\n                </Link>\n              );\n            })}\n            \n            {/* Admin Links */}\n            {user?.role === 'admin' && (\n              <div className=\"flex items-center space-x-8\">\n                {adminLinks.map((link) => (\n                  <Link\n                    key={link.href}\n                    href={link.href}\n                    className={`font-medium transition-colors duration-300 ${\n                      location === link.href\n                        ? \"text-primary\"\n                        : \"text-muted-foreground hover:text-primary\"\n                    }`}\n                    data-testid={`admin-link-${link.label.toLowerCase()}`}\n                  >\n                    {link.label}\n                  </Link>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Desktop Actions */}\n          <div className=\"hidden md:flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2 glass-effect px-3 py-2 rounded-lg\">\n              <Phone className=\"text-primary w-4 h-4\" />\n              <span className=\"text-sm font-medium\">+1 (555) 123-4567</span>\n            </div>\n            \n            {isAuthenticated ? (\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-sm text-muted-foreground\">\n                  Welcome, {user?.firstName || user?.email}\n                </span>\n                <Button\n                  onClick={logout}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"glass-effect border-border hover:bg-white/20\"\n                  data-testid=\"button-logout\"\n                >\n                  Logout\n                </Button>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <Link href=\"/auth/login\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    className=\"glass-effect border-border hover:bg-white/20\"\n                    data-testid=\"button-login\"\n                  >\n                    Sign In\n                  </Button>\n                </Link>\n                <Link href=\"/auth/register\">\n                  <Button\n                    className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground hover:shadow-lg transition-all duration-300\"\n                    size=\"sm\"\n                    data-testid=\"button-register\"\n                  >\n                    Sign Up\n                  </Button>\n                </Link>\n              </div>\n            )}\n            \n            <Button \n              className=\"md:hidden\"\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {mobileMenuOpen ? <X /> : <Menu />}\n            </Button>\n          </div>\n\n          {/* Mobile Menu Button */}\n          <Button \n            className=\"md:hidden\"\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\n            data-testid=\"button-mobile-menu\"\n          >\n            {mobileMenuOpen ? <X /> : <Menu />}\n          </Button>\n        </div>\n\n        {/* Mobile Menu */}\n        {mobileMenuOpen && (\n          <div className=\"md:hidden mt-4 glass-effect rounded-2xl p-6 space-y-4\">\n            {navLinks.map((link) => {\n              if (!link.public && !isAuthenticated) return null;\n              return (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  className={`block font-medium transition-colors duration-300 ${\n                    location === link.href\n                      ? \"text-primary\"\n                      : \"text-muted-foreground hover:text-primary\"\n                  }`}\n                  onClick={() => setMobileMenuOpen(false)}\n                  data-testid={`mobile-nav-link-${link.label.toLowerCase().replace(\" \", \"-\")}`}\n                >\n                  {link.label}\n                </Link>\n              );\n            })}\n            \n            {user?.role === 'admin' && (\n              <div className=\"border-t border-border pt-4 space-y-4\">\n                {adminLinks.map((link) => (\n                  <Link\n                    key={link.href}\n                    href={link.href}\n                    className={`block font-medium transition-colors duration-300 ${\n                      location === link.href\n                        ? \"text-primary\"\n                        : \"text-muted-foreground hover:text-primary\"\n                    }`}\n                    onClick={() => setMobileMenuOpen(false)}\n                    data-testid={`mobile-admin-link-${link.label.toLowerCase()}`}\n                  >\n                    {link.label}\n                  </Link>\n                ))}\n              </div>\n            )}\n            \n            <div className=\"border-t border-border pt-4\">\n              {isAuthenticated ? (\n                <Button\n                  onClick={logout}\n                  variant=\"outline\"\n                  className=\"w-full glass-effect border-border hover:bg-white/20\"\n                  data-testid=\"mobile-button-logout\"\n                >\n                  Logout\n                </Button>\n              ) : (\n                <div className=\"space-y-2\">\n                  <Link href=\"/auth/login\">\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full glass-effect border-border hover:bg-white/20\"\n                      data-testid=\"mobile-button-login\"\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      Sign In\n                    </Button>\n                  </Link>\n                  <Link href=\"/auth/register\">\n                    <Button\n                      className=\"w-full ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                      data-testid=\"mobile-button-register\"\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      Sign Up\n                    </Button>\n                  </Link>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":8637},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/floating-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nexport interface FloatingCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  hover?: boolean;\n  glow?: boolean;\n}\n\nconst FloatingCard = forwardRef<HTMLDivElement, FloatingCardProps>(\n  ({ className, hover = true, glow = false, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"glass-effect rounded-3xl border transition-all duration-400 cubic-bezier(0.4, 0, 0.2, 1)\",\n          {\n            \"floating-card\": hover,\n            \"animate-glow\": glow,\n          },\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nFloatingCard.displayName = \"FloatingCard\";\n\nexport { FloatingCard };\n","size_bytes":732},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/glass-card.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { forwardRef } from \"react\";\n\nexport interface GlassCardProps extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"default\" | \"dark\" | \"light\";\n}\n\nconst GlassCard = forwardRef<HTMLDivElement, GlassCardProps>(\n  ({ className, variant = \"default\", ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"rounded-3xl border transition-all duration-300\",\n          {\n            \"glass-effect\": variant === \"default\",\n            \"glass-dark\": variant === \"dark\", \n            \"bg-white/5 backdrop-blur-xl border-white/10\": variant === \"light\",\n          },\n          className\n        )}\n        {...props}\n      />\n    );\n  }\n);\n\nGlassCard.displayName = \"GlassCard\";\n\nexport { GlassCard };\n","size_bytes":778},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/bookings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/admin/Sidebar\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { FloatingCard } from \"@/components/ui/floating-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Search, Filter, Calendar, Clock, Car, User, DollarSign, CheckCircle, XCircle, AlertCircle, PlayCircle } from \"lucide-react\";\n\ninterface Booking {\n  id: string;\n  userId: string;\n  serviceId: string;\n  slotId: string;\n  vehicleType: string;\n  vehicleBrand: string;\n  vehicleModel: string;\n  manufacturingYear: number;\n  registrationPlate: string;\n  status: string;\n  totalAmount: string;\n  paymentStatus: string;\n  createdAt: string;\n  service?: {\n    name: string;\n    duration: number;\n  };\n  slot?: {\n    date: string;\n    startTime: string;\n    endTime: string;\n  };\n  user?: {\n    firstName?: string;\n    lastName?: string;\n    email?: string;\n  };\n}\n\nexport default function AdminBookings() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 1500);\n    }\n  }, [isAuthenticated, user, isLoading, toast]);\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  const updateBookingStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      return apiRequest(\"PUT\", `/api/bookings/${id}/status`, { status });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Booking Updated\",\n        description: \"Booking status has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/bookings\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update booking status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleStatusUpdate = (bookingId: string, newStatus: string) => {\n    updateBookingStatusMutation.mutate({ id: bookingId, status: newStatus });\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />;\n      case 'confirmed':\n        return <PlayCircle className=\"w-5 h-5 text-blue-400\" />;\n      case 'in-progress':\n        return <AlertCircle className=\"w-5 h-5 text-yellow-400\" />;\n      case 'cancelled':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />;\n      default:\n        return <Clock className=\"w-5 h-5 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-500/20 text-green-400';\n      case 'confirmed':\n        return 'bg-blue-500/20 text-blue-400';\n      case 'in-progress':\n        return 'bg-yellow-500/20 text-yellow-400';\n      case 'cancelled':\n        return 'bg-red-500/20 text-red-400';\n      default:\n        return 'bg-gray-500/20 text-gray-400';\n    }\n  };\n\n  const getUserDisplayName = (booking: Booking) => {\n    if (booking.user?.firstName && booking.user?.lastName) {\n      return `${booking.user.firstName} ${booking.user.lastName}`;\n    }\n    if (booking.user?.firstName) {\n      return booking.user.firstName;\n    }\n    return booking.user?.email?.split('@')[0] || 'Unknown User';\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // Filter and sort bookings\n  const filteredBookings = bookings?.filter((booking: Booking) => {\n    const matchesSearch = \n      booking.service?.name?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      booking.vehicleBrand?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      booking.vehicleModel?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      booking.registrationPlate?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      getUserDisplayName(booking).toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || booking.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  const sortedBookings = filteredBookings?.sort((a: Booking, b: Booking) => {\n    switch (sortBy) {\n      case \"oldest\":\n        return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n      case \"amount-high\":\n        return parseFloat(b.totalAmount) - parseFloat(a.totalAmount);\n      case \"amount-low\":\n        return parseFloat(a.totalAmount) - parseFloat(b.totalAmount);\n      case \"service\":\n        return (a.service?.name || '').localeCompare(b.service?.name || '');\n      default: // newest\n        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n    }\n  });\n\n  // Calculate statistics\n  const totalBookings = bookings?.length || 0;\n  const pendingBookings = bookings?.filter((b: Booking) => b.status === 'pending').length || 0;\n  const confirmedBookings = bookings?.filter((b: Booking) => b.status === 'confirmed').length || 0;\n  const completedBookings = bookings?.filter((b: Booking) => b.status === 'completed').length || 0;\n  const totalRevenue = bookings?.reduce((sum: number, booking: Booking) => \n    sum + parseFloat(booking.totalAmount || '0'), 0) || 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <GlassCard className=\"p-8\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <div className=\"text-lg font-semibold\">Loading...</div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <GlassCard className=\"p-12 max-w-md mx-auto text-center\">\n          <div className=\"text-xl font-semibold mb-4\">Unauthorized Access</div>\n          <div className=\"text-muted-foreground\">Admin privileges required</div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Sidebar />\n      \n      <div className=\"ml-64 p-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">\n            <span className=\"text-gradient\">Booking Management</span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Monitor and manage all customer bookings and appointments\n          </p>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid md:grid-cols-5 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <Calendar className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"total-bookings-stat\">\n              {totalBookings}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Bookings</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <Clock className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"pending-bookings-stat\">\n              {pendingBookings}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Pending</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-blue-500 to-blue-600 rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <PlayCircle className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"confirmed-bookings-stat\">\n              {confirmedBookings}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Confirmed</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-green-600 rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <CheckCircle className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"completed-bookings-stat\">\n              {completedBookings}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Completed</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-green-600 to-emerald-600 rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <DollarSign className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"total-revenue-stat\">\n              ${totalRevenue.toLocaleString()}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Revenue</div>\n          </GlassCard>\n        </div>\n\n        {/* Filters */}\n        <GlassCard className=\"p-6 mb-8\">\n          <div className=\"flex flex-col lg:flex-row gap-4\">\n            {/* Search */}\n            <div className=\"flex-1 relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-5 h-5\" />\n              <Input\n                placeholder=\"Search bookings...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 glass-effect border-border\"\n                data-testid=\"input-search-bookings\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"glass-effect border-border w-48\" data-testid=\"select-status-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value=\"pending\">Pending</SelectItem>\n                <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                <SelectItem value=\"in-progress\">In Progress</SelectItem>\n                <SelectItem value=\"completed\">Completed</SelectItem>\n                <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Sort Options */}\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"glass-effect border-border w-48\" data-testid=\"select-sort-bookings\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"newest\">Newest First</SelectItem>\n                <SelectItem value=\"oldest\">Oldest First</SelectItem>\n                <SelectItem value=\"amount-high\">Highest Amount</SelectItem>\n                <SelectItem value=\"amount-low\">Lowest Amount</SelectItem>\n                <SelectItem value=\"service\">By Service</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"mt-4 text-sm text-muted-foreground\" data-testid=\"filtered-bookings-count\">\n            Showing {sortedBookings?.length || 0} of {totalBookings} bookings\n          </div>\n        </GlassCard>\n\n        {/* Bookings List */}\n        <div className=\"space-y-4\">\n          {bookingsLoading ? (\n            Array.from({ length: 5 }).map((_, i) => (\n              <GlassCard key={i} className=\"p-6 animate-pulse\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-muted rounded-full\"></div>\n                    <div className=\"space-y-2\">\n                      <div className=\"h-4 bg-muted rounded w-32\"></div>\n                      <div className=\"h-3 bg-muted rounded w-24\"></div>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-6 bg-muted rounded w-20\"></div>\n                    <div className=\"h-4 bg-muted rounded w-16\"></div>\n                  </div>\n                </div>\n              </GlassCard>\n            ))\n          ) : sortedBookings?.length === 0 ? (\n            <GlassCard className=\"p-12 text-center\">\n              <Filter className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">No bookings found</h3>\n              <p className=\"text-muted-foreground mb-6\">\n                {searchQuery || statusFilter !== \"all\" \n                  ? \"Try adjusting your search criteria or filters\"\n                  : \"No bookings have been made yet\"\n                }\n              </p>\n              {(searchQuery || statusFilter !== \"all\") && (\n                <Button\n                  onClick={() => {\n                    setSearchQuery(\"\");\n                    setStatusFilter(\"all\");\n                  }}\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  Clear Filters\n                </Button>\n              )}\n            </GlassCard>\n          ) : (\n            sortedBookings?.map((booking: Booking) => (\n              <FloatingCard key={booking.id} className=\"p-6\" data-testid={`booking-card-${booking.id}`}>\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\">\n                      <Car className=\"text-white w-6 h-6\" />\n                    </div>\n                    <div>\n                      <div className=\"flex items-center space-x-2 mb-1\">\n                        <h3 className=\"font-semibold text-lg\" data-testid={`booking-service-${booking.id}`}>\n                          {booking.service?.name || 'Service'}\n                        </h3>\n                        <Badge className={getStatusColor(booking.status)}>\n                          <div className=\"flex items-center space-x-1\">\n                            {getStatusIcon(booking.status)}\n                            <span className=\"capitalize\">{booking.status}</span>\n                          </div>\n                        </Badge>\n                      </div>\n                      <div className=\"text-sm text-muted-foreground space-y-1\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-1\">\n                            <User className=\"w-4 h-4\" />\n                            <span data-testid={`booking-customer-${booking.id}`}>\n                              {getUserDisplayName(booking)}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Car className=\"w-4 h-4\" />\n                            <span data-testid={`booking-vehicle-${booking.id}`}>\n                              {booking.vehicleBrand} {booking.vehicleModel} ({booking.registrationPlate})\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"w-4 h-4\" />\n                            <span data-testid={`booking-date-${booking.id}`}>\n                              {booking.slot?.date} at {booking.slot?.startTime} - {booking.slot?.endTime}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center space-x-1\">\n                            <Clock className=\"w-4 h-4\" />\n                            <span>{booking.service?.duration || 0} min</span>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"text-right\">\n                    <div className=\"text-2xl font-bold text-gradient mb-2\" data-testid={`booking-amount-${booking.id}`}>\n                      ${booking.totalAmount}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground mb-4\">\n                      {formatDate(booking.createdAt)}\n                    </div>\n\n                    {/* Status Update Buttons */}\n                    <div className=\"flex space-x-2\">\n                      {booking.status === 'pending' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleStatusUpdate(booking.id, 'confirmed')}\n                          disabled={updateBookingStatusMutation.isPending}\n                          className=\"ripple-effect bg-gradient-to-r from-blue-500 to-blue-600 text-white\"\n                          data-testid={`button-confirm-${booking.id}`}\n                        >\n                          Confirm\n                        </Button>\n                      )}\n                      {booking.status === 'confirmed' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleStatusUpdate(booking.id, 'in-progress')}\n                          disabled={updateBookingStatusMutation.isPending}\n                          className=\"ripple-effect bg-gradient-to-r from-yellow-500 to-orange-500 text-white\"\n                          data-testid={`button-start-${booking.id}`}\n                        >\n                          Start\n                        </Button>\n                      )}\n                      {booking.status === 'in-progress' && (\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handleStatusUpdate(booking.id, 'completed')}\n                          disabled={updateBookingStatusMutation.isPending}\n                          className=\"ripple-effect bg-gradient-to-r from-green-500 to-green-600 text-white\"\n                          data-testid={`button-complete-${booking.id}`}\n                        >\n                          Complete\n                        </Button>\n                      )}\n                      {(booking.status === 'pending' || booking.status === 'confirmed') && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={() => handleStatusUpdate(booking.id, 'cancelled')}\n                          disabled={updateBookingStatusMutation.isPending}\n                          className=\"glass-effect border-destructive text-destructive hover:bg-destructive/20\"\n                          data-testid={`button-cancel-${booking.id}`}\n                        >\n                          Cancel\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </FloatingCard>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20990},"client/src/pages/admin/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/admin/Sidebar\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { FloatingCard } from \"@/components/ui/floating-card\";\nimport { Calendar, DollarSign, Star, TrendingUp, Users, Car, Clock, Award } from \"lucide-react\";\n\nexport default function AdminDashboard() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 1500);\n    }\n  }, [isAuthenticated, user, isLoading, toast]);\n\n  const { data: bookings, isLoading: bookingsLoading } = useQuery({\n    queryKey: [\"/api/bookings\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  const { data: services } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  const { data: reviews } = useQuery({\n    queryKey: [\"/api/reviews\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <GlassCard className=\"p-8\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <div className=\"text-lg font-semibold\">Loading...</div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <GlassCard className=\"p-12 max-w-md mx-auto text-center\">\n          <div className=\"text-xl font-semibold mb-4\">Unauthorized Access</div>\n          <div className=\"text-muted-foreground\">Admin privileges required</div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  // Calculate statistics\n  const totalBookings = bookings?.length || 0;\n  const totalRevenue = bookings?.reduce((sum: number, booking: any) => \n    sum + parseFloat(booking.totalAmount || '0'), 0) || 0;\n  const averageRating = reviews?.length \n    ? (reviews.reduce((sum: number, review: any) => sum + review.rating, 0) / reviews.length).toFixed(1)\n    : \"0.0\";\n  \n  const recentBookings = bookings?.slice(0, 5) || [];\n  const pendingBookings = bookings?.filter((booking: any) => booking.status === 'pending').length || 0;\n  const completedBookings = bookings?.filter((booking: any) => booking.status === 'completed').length || 0;\n  const activeServices = services?.filter((service: any) => service.isActive).length || 0;\n\n  return (\n    <div className=\"min-h-screen\">\n      <Sidebar />\n      \n      <div className=\"ml-64 p-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-4xl font-bold mb-2\">\n            <span className=\"text-gradient\">Dashboard</span>\n          </h1>\n          <p className=\"text-muted-foreground\">\n            Welcome back, {user?.firstName || user?.email?.split('@')[0]}! Here's what's happening today.\n          </p>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <FloatingCard className=\"p-6\" data-testid=\"stat-total-bookings\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold text-gradient\">{totalBookings}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Bookings</div>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n                <Calendar className=\"text-white\" />\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"progress-bar bg-muted rounded-full h-2\">\n                <div className=\"bg-gradient-to-r from-primary to-accent h-2 rounded-full w-3/4 transition-all duration-1000\"></div>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">+12% from last month</div>\n            </div>\n          </FloatingCard>\n\n          <FloatingCard className=\"p-6\" data-testid=\"stat-monthly-revenue\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold text-gradient\">${totalRevenue.toLocaleString()}</div>\n                <div className=\"text-sm text-muted-foreground\">Total Revenue</div>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-secondary to-primary rounded-xl flex items-center justify-center\">\n                <DollarSign className=\"text-white\" />\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"progress-bar bg-muted rounded-full h-2\">\n                <div className=\"bg-gradient-to-r from-secondary to-primary h-2 rounded-full w-5/6 transition-all duration-1000\"></div>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">+18% from last month</div>\n            </div>\n          </FloatingCard>\n\n          <FloatingCard className=\"p-6\" data-testid=\"stat-avg-rating\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold text-gradient\">{averageRating}</div>\n                <div className=\"text-sm text-muted-foreground\">Avg. Rating</div>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-secondary rounded-xl flex items-center justify-center\">\n                <Star className=\"text-white\" />\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"progress-bar bg-muted rounded-full h-2\">\n                <div className=\"bg-gradient-to-r from-accent to-secondary h-2 rounded-full w-full transition-all duration-1000\"></div>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">+0.2 from last month</div>\n            </div>\n          </FloatingCard>\n\n          <FloatingCard className=\"p-6\" data-testid=\"stat-active-services\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-3xl font-bold text-gradient\">{activeServices}</div>\n                <div className=\"text-sm text-muted-foreground\">Active Services</div>\n              </div>\n              <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-primary rounded-xl flex items-center justify-center\">\n                <Car className=\"text-white\" />\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"progress-bar bg-muted rounded-full h-2\">\n                <div className=\"bg-gradient-to-r from-green-500 to-primary h-2 rounded-full w-4/5 transition-all duration-1000\"></div>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">All services active</div>\n            </div>\n          </FloatingCard>\n        </div>\n\n        {/* Quick Stats Row */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <GlassCard className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"pending-bookings\">{pendingBookings}</div>\n            <div className=\"text-sm text-muted-foreground\">Pending Bookings</div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"completed-bookings\">{completedBookings}</div>\n            <div className=\"text-sm text-muted-foreground\">Completed Today</div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-gradient\">{reviews?.length || 0}</div>\n            <div className=\"text-sm text-muted-foreground\">Total Reviews</div>\n          </GlassCard>\n          \n          <GlassCard className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-gradient\">98%</div>\n            <div className=\"text-sm text-muted-foreground\">Satisfaction Rate</div>\n          </GlassCard>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-8\">\n          {/* Recent Bookings */}\n          <GlassCard className=\"p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold\">Recent Bookings</h3>\n              <a href=\"/admin/bookings\" className=\"text-primary hover:text-accent transition-colors duration-300 font-medium\">\n                View All\n              </a>\n            </div>\n\n            <div className=\"space-y-4\">\n              {bookingsLoading ? (\n                Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center justify-between p-4 glass-effect rounded-xl animate-pulse\">\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-muted rounded-full\"></div>\n                      <div className=\"space-y-2\">\n                        <div className=\"h-4 bg-muted rounded w-32\"></div>\n                        <div className=\"h-3 bg-muted rounded w-24\"></div>\n                      </div>\n                    </div>\n                    <div className=\"h-6 bg-muted rounded w-16\"></div>\n                  </div>\n                ))\n              ) : recentBookings.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Calendar className=\"w-16 h-16 mx-auto mb-4 opacity-50\" />\n                  <p>No recent bookings</p>\n                </div>\n              ) : (\n                recentBookings.map((booking: any) => (\n                  <div key={booking.id} className=\"flex items-center justify-between p-4 glass-effect rounded-xl hover:bg-white/10 transition-all duration-300\" data-testid={`recent-booking-${booking.id}`}>\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-10 h-10 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center\">\n                        <Car className=\"text-white w-5 h-5\" />\n                      </div>\n                      <div>\n                        <div className=\"font-semibold\">{booking.service?.name || 'Service'}</div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {booking.vehicleBrand} {booking.vehicleModel}\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"font-semibold text-gradient\">${booking.totalAmount}</div>\n                      <div className=\"text-xs text-muted-foreground\">{booking.slot?.date}</div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </GlassCard>\n\n          {/* Analytics Chart Placeholder */}\n          <GlassCard className=\"p-6\">\n            <h3 className=\"text-xl font-bold mb-6\">Booking Analytics</h3>\n            <div className=\"h-64 bg-gradient-to-br from-primary/10 to-accent/10 rounded-xl flex items-center justify-center\">\n              <div className=\"text-center\">\n                <TrendingUp className=\"w-16 h-16 text-primary mx-auto mb-4\" />\n                <div className=\"text-lg font-semibold\">Interactive Analytics Chart</div>\n                <div className=\"text-sm text-muted-foreground\">Real-time booking data visualization</div>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"mt-8\">\n          <GlassCard className=\"p-6\">\n            <h3 className=\"text-xl font-bold mb-6\">Performance Metrics</h3>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-primary to-accent rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Clock className=\"text-white text-xl\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gradient\">32 min</div>\n                <div className=\"text-sm text-muted-foreground\">Avg Service Time</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-secondary to-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Users className=\"text-white text-xl\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gradient\">850+</div>\n                <div className=\"text-sm text-muted-foreground\">Happy Customers</div>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"w-16 h-16 bg-gradient-to-r from-accent to-secondary rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <Award className=\"text-white text-xl\" />\n                </div>\n                <div className=\"text-2xl font-bold text-gradient\">98%</div>\n                <div className=\"text-sm text-muted-foreground\">Customer Retention</div>\n              </div>\n            </div>\n          </GlassCard>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13703},"client/src/pages/admin/services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from \"@/components/admin/Sidebar\";\nimport { GlassCard } from \"@/components/ui/glass-card\";\nimport { FloatingCard } from \"@/components/ui/floating-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Plus, Edit, Trash2, Car, Clock, DollarSign, Tag } from \"lucide-react\";\n\ninterface Service {\n  id: string;\n  name: string;\n  description: string;\n  price: string;\n  duration: number;\n  category: string;\n  features?: string[];\n  isActive: boolean;\n}\n\nexport default function AdminServices() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n    duration: \"\",\n    category: \"basic\",\n    features: \"\",\n  });\n\n  useEffect(() => {\n    if (!isLoading && (!isAuthenticated || user?.role !== 'admin')) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"Admin access required. Redirecting...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = '/';\n      }, 1500);\n    }\n  }, [isAuthenticated, user, isLoading, toast]);\n\n  const { data: services, isLoading: servicesLoading } = useQuery({\n    queryKey: [\"/api/services\"],\n    enabled: isAuthenticated && user?.role === 'admin',\n  });\n\n  const createServiceMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/services\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Service Created\",\n        description: \"New service has been added successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      closeModal();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateServiceMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      return apiRequest(\"PUT\", `/api/services/${id}`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Service Updated\",\n        description: \"Service has been updated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      closeModal();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteServiceMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/services/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Service Deleted\",\n        description: \"Service has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete service.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const openModal = (service?: Service) => {\n    if (service) {\n      setEditingService(service);\n      setFormData({\n        name: service.name,\n        description: service.description,\n        price: service.price,\n        duration: service.duration.toString(),\n        category: service.category,\n        features: service.features?.join(\", \") || \"\",\n      });\n    } else {\n      setEditingService(null);\n      setFormData({\n        name: \"\",\n        description: \"\",\n        price: \"\",\n        duration: \"\",\n        category: \"basic\",\n        features: \"\",\n      });\n    }\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setEditingService(null);\n    setFormData({\n      name: \"\",\n      description: \"\",\n      price: \"\",\n      duration: \"\",\n      category: \"basic\",\n      features: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    const serviceData = {\n      name: formData.name,\n      description: formData.description,\n      price: formData.price,\n      duration: parseInt(formData.duration),\n      category: formData.category,\n      features: formData.features ? formData.features.split(\",\").map(f => f.trim()).filter(f => f) : [],\n      isActive: true,\n    };\n\n    if (editingService) {\n      updateServiceMutation.mutate({ id: editingService.id, data: serviceData });\n    } else {\n      createServiceMutation.mutate(serviceData);\n    }\n  };\n\n  const handleDelete = (service: Service) => {\n    if (window.confirm(`Are you sure you want to delete \"${service.name}\"?`)) {\n      deleteServiceMutation.mutate(service.id);\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'premium':\n        return <Tag className=\"text-primary\" />;\n      case 'detailing':\n        return <Car className=\"text-accent\" />;\n      default:\n        return <Car className=\"text-green-500\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'premium':\n        return 'bg-primary/20 text-primary';\n      case 'detailing':\n        return 'bg-accent/20 text-accent';\n      default:\n        return 'bg-green-500/20 text-green-500';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <GlassCard className=\"p-8\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <div className=\"text-lg font-semibold\">Loading...</div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || user?.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <GlassCard className=\"p-12 max-w-md mx-auto text-center\">\n          <div className=\"text-xl font-semibold mb-4\">Unauthorized Access</div>\n          <div className=\"text-muted-foreground\">Admin privileges required</div>\n        </GlassCard>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      <Sidebar />\n      \n      <div className=\"ml-64 p-8\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-4xl font-bold mb-2\">\n              <span className=\"text-gradient\">Service Management</span>\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Manage car wash services, pricing, and availability\n            </p>\n          </div>\n          <Button\n            onClick={() => openModal()}\n            className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n            data-testid=\"button-add-service\"\n          >\n            <Plus className=\"w-5 h-5 mr-2\" />\n            Add Service\n          </Button>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid md:grid-cols-4 gap-6 mb-8\">\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <Car className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\" data-testid=\"total-services\">\n              {services?.length || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total Services</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-secondary to-primary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <Tag className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\">\n              {services?.filter((s: Service) => s.isActive).length || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Active Services</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-accent to-secondary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <DollarSign className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\">\n              ${services?.reduce((avg: number, s: Service) => avg + parseFloat(s.price), 0) / (services?.length || 1) || 0}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Avg. Price</div>\n          </GlassCard>\n\n          <GlassCard className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-r from-green-500 to-primary rounded-xl flex items-center justify-center mb-4 mx-auto\">\n              <Clock className=\"text-white\" />\n            </div>\n            <div className=\"text-2xl font-bold text-gradient\">\n              {Math.round(services?.reduce((avg: number, s: Service) => avg + s.duration, 0) / (services?.length || 1)) || 0} min\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Avg. Duration</div>\n          </GlassCard>\n        </div>\n\n        {/* Services Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {servicesLoading ? (\n            Array.from({ length: 6 }).map((_, i) => (\n              <GlassCard key={i} className=\"p-6 animate-pulse\">\n                <div className=\"space-y-4\">\n                  <div className=\"w-16 h-16 bg-muted rounded-2xl\"></div>\n                  <div className=\"h-6 bg-muted rounded w-3/4\"></div>\n                  <div className=\"h-4 bg-muted rounded w-full\"></div>\n                  <div className=\"h-4 bg-muted rounded w-2/3\"></div>\n                  <div className=\"flex space-x-2\">\n                    <div className=\"h-8 bg-muted rounded w-16\"></div>\n                    <div className=\"h-8 bg-muted rounded w-16\"></div>\n                  </div>\n                </div>\n              </GlassCard>\n            ))\n          ) : services?.length === 0 ? (\n            <div className=\"col-span-full text-center py-16\">\n              <GlassCard className=\"p-12 max-w-md mx-auto\">\n                <Car className=\"w-16 h-16 text-muted-foreground mx-auto mb-4\" />\n                <h3 className=\"text-xl font-semibold mb-2\">No services found</h3>\n                <p className=\"text-muted-foreground mb-6\">\n                  Get started by creating your first car wash service\n                </p>\n                <Button\n                  onClick={() => openModal()}\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                >\n                  Create Service\n                </Button>\n              </GlassCard>\n            </div>\n          ) : (\n            services?.map((service: Service) => (\n              <FloatingCard key={service.id} className=\"p-6\" data-testid={`service-card-${service.id}`}>\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div className=\"w-12 h-12 bg-gradient-to-r from-primary to-accent rounded-xl flex items-center justify-center\">\n                    {getCategoryIcon(service.category)}\n                  </div>\n                  <Badge className={getCategoryColor(service.category)}>\n                    {service.category}\n                  </Badge>\n                </div>\n\n                <h3 className=\"text-xl font-bold mb-2\" data-testid={`service-name-${service.id}`}>\n                  {service.name}\n                </h3>\n                <p className=\"text-muted-foreground text-sm mb-4 line-clamp-2\">\n                  {service.description}\n                </p>\n\n                <div className=\"flex items-center justify-between mb-4\">\n                  <span className=\"text-2xl font-bold text-gradient\" data-testid={`service-price-${service.id}`}>\n                    ${service.price}\n                  </span>\n                  <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                    <Clock className=\"w-4 h-4\" />\n                    <span className=\"text-sm\" data-testid={`service-duration-${service.id}`}>\n                      {service.duration} min\n                    </span>\n                  </div>\n                </div>\n\n                {service.features && service.features.length > 0 && (\n                  <div className=\"mb-4\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      {service.features.slice(0, 3).map((feature, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {feature}\n                        </Badge>\n                      ))}\n                      {service.features.length > 3 && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          +{service.features.length - 3}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex space-x-2\">\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => openModal(service)}\n                    className=\"flex-1 glass-effect border-border hover:bg-white/20\"\n                    data-testid={`button-edit-${service.id}`}\n                  >\n                    <Edit className=\"w-4 h-4 mr-1\" />\n                    Edit\n                  </Button>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleDelete(service)}\n                    className=\"glass-effect border-destructive text-destructive hover:bg-destructive/20\"\n                    data-testid={`button-delete-${service.id}`}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </FloatingCard>\n            ))\n          )}\n        </div>\n\n        {/* Service Modal */}\n        <Dialog open={isModalOpen} onOpenChange={closeModal}>\n          <DialogContent className=\"glass-effect border-border max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingService ? 'Edit Service' : 'Create New Service'}\n              </DialogTitle>\n            </DialogHeader>\n\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"name\">Service Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={formData.name}\n                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}\n                    className=\"glass-effect border-border\"\n                    placeholder=\"e.g., Premium Car Wash\"\n                    required\n                    data-testid=\"input-service-name\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"category\">Category</Label>\n                  <Select\n                    value={formData.category}\n                    onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}\n                  >\n                    <SelectTrigger className=\"glass-effect border-border\" data-testid=\"select-service-category\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"basic\">Basic</SelectItem>\n                      <SelectItem value=\"premium\">Premium</SelectItem>\n                      <SelectItem value=\"detailing\">Detailing</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"price\">Price ($)</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={formData.price}\n                    onChange={(e) => setFormData(prev => ({ ...prev, price: e.target.value }))}\n                    className=\"glass-effect border-border\"\n                    placeholder=\"29.99\"\n                    required\n                    data-testid=\"input-service-price\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"duration\">Duration (minutes)</Label>\n                  <Input\n                    id=\"duration\"\n                    type=\"number\"\n                    value={formData.duration}\n                    onChange={(e) => setFormData(prev => ({ ...prev, duration: e.target.value }))}\n                    className=\"glass-effect border-border\"\n                    placeholder=\"45\"\n                    required\n                    data-testid=\"input-service-duration\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  className=\"glass-effect border-border\"\n                  placeholder=\"Describe the service and what's included...\"\n                  rows={3}\n                  required\n                  data-testid=\"textarea-service-description\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"features\">Features (comma-separated)</Label>\n                <Input\n                  id=\"features\"\n                  value={formData.features}\n                  onChange={(e) => setFormData(prev => ({ ...prev, features: e.target.value }))}\n                  className=\"glass-effect border-border\"\n                  placeholder=\"Exterior wash, Wax protection, Tire shine\"\n                  data-testid=\"input-service-features\"\n                />\n              </div>\n\n              <div className=\"flex justify-end space-x-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={closeModal}\n                  className=\"glass-effect border-border hover:bg-white/20\"\n                  data-testid=\"button-cancel-service\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createServiceMutation.isPending || updateServiceMutation.isPending}\n                  className=\"ripple-effect bg-gradient-to-r from-primary to-accent text-primary-foreground\"\n                  data-testid=\"button-save-service\"\n                >\n                  {createServiceMutation.isPending || updateServiceMutation.isPending\n                    ? 'Saving...'\n                    : editingService\n                    ? 'Update Service'\n                    : 'Create Service'\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":21042},"client/src/pages/auth/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst loginSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const { toast } = useToast();\n  const [location, navigate] = useState<string>('');\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome back!\",\n      });\n      window.location.href = \"/\"; // Full page reload to update auth state\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-teal-50 to-cyan-100 p-4\">\n      <Card className=\"w-full max-w-md backdrop-blur-sm bg-white/80 border-white/20 shadow-xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-teal-600 to-blue-600 bg-clip-text text-transparent\">\n            Welcome Back\n          </CardTitle>\n          <CardDescription>\n            Sign in to your AquaShine account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                data-testid=\"input-email\"\n                {...form.register(\"email\")}\n                className=\"bg-white/50\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"Enter your password\"\n                data-testid=\"input-password\"\n                {...form.register(\"password\")}\n                className=\"bg-white/50\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-teal-600 to-blue-600 hover:from-teal-700 hover:to-blue-700\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Don't have an account?{\" \"}\n              <Link href=\"/auth/register\">\n                <a className=\"text-teal-600 hover:text-teal-700 font-medium\" data-testid=\"link-register\">\n                  Sign up\n                </a>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4373},"client/src/pages/auth/register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Link } from \"wouter\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst registerSchema = z.object({\n  email: z.string().email(\"Please enter a valid email\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const { toast } = useToast();\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      address: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const response = await apiRequest(\"POST\", \"/api/auth/register\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem(\"token\", data.token);\n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome to AquaShine!\",\n      });\n      window.location.href = \"/\"; // Full page reload to update auth state\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"An error occurred\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-teal-50 to-cyan-100 p-4\">\n      <Card className=\"w-full max-w-md backdrop-blur-sm bg-white/80 border-white/20 shadow-xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-teal-600 to-blue-600 bg-clip-text text-transparent\">\n            Create Account\n          </CardTitle>\n          <CardDescription>\n            Join AquaShine for premium car wash services\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"firstName\">First Name</Label>\n                <Input\n                  id=\"firstName\"\n                  placeholder=\"John\"\n                  data-testid=\"input-firstName\"\n                  {...form.register(\"firstName\")}\n                  className=\"bg-white/50\"\n                />\n              </div>\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"lastName\">Last Name</Label>\n                <Input\n                  id=\"lastName\"\n                  placeholder=\"Doe\"\n                  data-testid=\"input-lastName\"\n                  {...form.register(\"lastName\")}\n                  className=\"bg-white/50\"\n                />\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email *</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                placeholder=\"your@email.com\"\n                data-testid=\"input-email\"\n                {...form.register(\"email\")}\n                className=\"bg-white/50\"\n              />\n              {form.formState.errors.email && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.email.message}</p>\n              )}\n            </div>\n            \n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password *</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"At least 6 characters\"\n                data-testid=\"input-password\"\n                {...form.register(\"password\")}\n                className=\"bg-white/50\"\n              />\n              {form.formState.errors.password && (\n                <p className=\"text-sm text-red-600\">{form.formState.errors.password.message}</p>\n              )}\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"phone\">Phone</Label>\n              <Input\n                id=\"phone\"\n                placeholder=\"+27 11 123 4567\"\n                data-testid=\"input-phone\"\n                {...form.register(\"phone\")}\n                className=\"bg-white/50\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                id=\"address\"\n                placeholder=\"123 Main St, City\"\n                data-testid=\"input-address\"\n                {...form.register(\"address\")}\n                className=\"bg-white/50\"\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-teal-600 to-blue-600 hover:from-teal-700 hover:to-blue-700\"\n              disabled={registerMutation.isPending}\n              data-testid=\"button-register\"\n            >\n              {registerMutation.isPending ? \"Creating account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-gray-600\">\n              Already have an account?{\" \"}\n              <Link href=\"/auth/login\">\n                <a className=\"text-teal-600 hover:text-teal-700 font-medium\" data-testid=\"link-login\">\n                  Sign in\n                </a>\n              </Link>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6171}},"version":1}